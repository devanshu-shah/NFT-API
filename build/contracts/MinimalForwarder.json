{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "100": "contracts/node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
    "103": "contracts/node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol",
    "33": "contracts/node_modules/@openzeppelin/contracts/metatx/MinimalForwarder.sol"
  },
  "ast": {
    "absolutePath": "contracts/node_modules/@openzeppelin/contracts/metatx/MinimalForwarder.sol",
    "exportedSymbols": {
      "ECDSA": [
        16265
      ],
      "EIP712": [
        16553
      ],
      "MinimalForwarder": [
        5682
      ]
    },
    "id": 5683,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5513,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:33"
      },
      {
        "absolutePath": "contracts/node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
        "file": "../utils/cryptography/ECDSA.sol",
        "id": 5514,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5683,
        "sourceUnit": 16266,
        "src": "58:41:33",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol",
        "file": "../utils/cryptography/draft-EIP712.sol",
        "id": 5515,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5683,
        "sourceUnit": 16554,
        "src": "100:48:33",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5517,
              "name": "EIP712",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16553,
              "src": "299:6:33"
            },
            "id": 5518,
            "nodeType": "InheritanceSpecifier",
            "src": "299:6:33"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 5516,
          "nodeType": "StructuredDocumentation",
          "src": "150:119:33",
          "text": " @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}."
        },
        "fullyImplemented": true,
        "id": 5682,
        "linearizedBaseContracts": [
          5682,
          16553
        ],
        "name": "MinimalForwarder",
        "nameLocation": "279:16:33",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 5521,
            "libraryName": {
              "id": 5519,
              "name": "ECDSA",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16265,
              "src": "318:5:33"
            },
            "nodeType": "UsingForDirective",
            "src": "312:24:33",
            "typeName": {
              "id": 5520,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "328:7:33",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "canonicalName": "MinimalForwarder.ForwardRequest",
            "id": 5534,
            "members": [
              {
                "constant": false,
                "id": 5523,
                "mutability": "mutable",
                "name": "from",
                "nameLocation": "382:4:33",
                "nodeType": "VariableDeclaration",
                "scope": 5534,
                "src": "374:12:33",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 5522,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "374:7:33",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5525,
                "mutability": "mutable",
                "name": "to",
                "nameLocation": "404:2:33",
                "nodeType": "VariableDeclaration",
                "scope": 5534,
                "src": "396:10:33",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 5524,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "396:7:33",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5527,
                "mutability": "mutable",
                "name": "value",
                "nameLocation": "424:5:33",
                "nodeType": "VariableDeclaration",
                "scope": 5534,
                "src": "416:13:33",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5526,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "416:7:33",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5529,
                "mutability": "mutable",
                "name": "gas",
                "nameLocation": "447:3:33",
                "nodeType": "VariableDeclaration",
                "scope": 5534,
                "src": "439:11:33",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5528,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "439:7:33",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5531,
                "mutability": "mutable",
                "name": "nonce",
                "nameLocation": "468:5:33",
                "nodeType": "VariableDeclaration",
                "scope": 5534,
                "src": "460:13:33",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5530,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "460:7:33",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5533,
                "mutability": "mutable",
                "name": "data",
                "nameLocation": "489:4:33",
                "nodeType": "VariableDeclaration",
                "scope": 5534,
                "src": "483:10:33",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 5532,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "483:5:33",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ForwardRequest",
            "nameLocation": "349:14:33",
            "nodeType": "StructDefinition",
            "scope": 5682,
            "src": "342:158:33",
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 5539,
            "mutability": "constant",
            "name": "_TYPEHASH",
            "nameLocation": "531:9:33",
            "nodeType": "VariableDeclaration",
            "scope": 5682,
            "src": "506:148:33",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 5535,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "506:7:33",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "466f72776172645265717565737428616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c6279746573206461746129",
                  "id": 5537,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "561:92:33",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_dd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e48",
                    "typeString": "literal_string \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\""
                  },
                  "value": "ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_dd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e48",
                    "typeString": "literal_string \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\""
                  }
                ],
                "id": 5536,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "551:9:33",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 5538,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "551:103:33",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 5543,
            "mutability": "mutable",
            "name": "_nonces",
            "nameLocation": "697:7:33",
            "nodeType": "VariableDeclaration",
            "scope": 5682,
            "src": "661:43:33",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 5542,
              "keyType": {
                "id": 5540,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "669:7:33",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "661:27:33",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 5541,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "680:7:33",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 5550,
              "nodeType": "Block",
              "src": "761:2:33",
              "statements": []
            },
            "id": 5551,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "4d696e696d616c466f72776172646572",
                    "id": 5546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "732:18:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_9e0923a39f515e9a8cebc9fb694b9abf7e4b8c3f7ab6f81b56eabdac504b08dc",
                      "typeString": "literal_string \"MinimalForwarder\""
                    },
                    "value": "MinimalForwarder"
                  },
                  {
                    "hexValue": "302e302e31",
                    "id": 5547,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "752:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_ae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc199163811885",
                      "typeString": "literal_string \"0.0.1\""
                    },
                    "value": "0.0.1"
                  }
                ],
                "id": 5548,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 5545,
                  "name": "EIP712",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16553,
                  "src": "725:6:33"
                },
                "nodeType": "ModifierInvocation",
                "src": "725:35:33"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "722:2:33"
            },
            "returnParameters": {
              "id": 5549,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "761:0:33"
            },
            "scope": 5682,
            "src": "711:52:33",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5562,
              "nodeType": "Block",
              "src": "831:37:33",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 5558,
                      "name": "_nonces",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5543,
                      "src": "848:7:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 5560,
                    "indexExpression": {
                      "id": 5559,
                      "name": "from",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5553,
                      "src": "856:4:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "848:13:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 5557,
                  "id": 5561,
                  "nodeType": "Return",
                  "src": "841:20:33"
                }
              ]
            },
            "functionSelector": "2d0335ab",
            "id": 5563,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getNonce",
            "nameLocation": "778:8:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5554,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5553,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "795:4:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5563,
                  "src": "787:12:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5552,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "787:7:33",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "786:14:33"
            },
            "returnParameters": {
              "id": 5557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5556,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5563,
                  "src": "822:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5555,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "822:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "821:9:33"
            },
            "scope": 5682,
            "src": "769:99:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5614,
              "nodeType": "Block",
              "src": "972:264:33",
              "statements": [
                {
                  "assignments": [
                    5574
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5574,
                      "mutability": "mutable",
                      "name": "signer",
                      "nameLocation": "990:6:33",
                      "nodeType": "VariableDeclaration",
                      "scope": 5614,
                      "src": "982:14:33",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 5573,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "982:7:33",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5600,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 5598,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5568,
                        "src": "1150:9:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 5579,
                                    "name": "_TYPEHASH",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5539,
                                    "src": "1050:9:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 5580,
                                      "name": "req",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5566,
                                      "src": "1061:3:33",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                        "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                                      }
                                    },
                                    "id": 5581,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "from",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 5523,
                                    "src": "1061:8:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 5582,
                                      "name": "req",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5566,
                                      "src": "1071:3:33",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                        "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                                      }
                                    },
                                    "id": 5583,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "to",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 5525,
                                    "src": "1071:6:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 5584,
                                      "name": "req",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5566,
                                      "src": "1079:3:33",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                        "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                                      }
                                    },
                                    "id": 5585,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "value",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 5527,
                                    "src": "1079:9:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 5586,
                                      "name": "req",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5566,
                                      "src": "1090:3:33",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                        "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                                      }
                                    },
                                    "id": 5587,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "gas",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 5529,
                                    "src": "1090:7:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 5588,
                                      "name": "req",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5566,
                                      "src": "1099:3:33",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                        "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                                      }
                                    },
                                    "id": 5589,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "nonce",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 5531,
                                    "src": "1099:9:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "expression": {
                                          "id": 5591,
                                          "name": "req",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 5566,
                                          "src": "1120:3:33",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                            "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                                          }
                                        },
                                        "id": 5592,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "data",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 5533,
                                        "src": "1120:8:33",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_calldata_ptr",
                                          "typeString": "bytes calldata"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_calldata_ptr",
                                          "typeString": "bytes calldata"
                                        }
                                      ],
                                      "id": 5590,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -8,
                                      "src": "1110:9:33",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 5593,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1110:19:33",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "expression": {
                                    "id": 5577,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "1039:3:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 5578,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encode",
                                  "nodeType": "MemberAccess",
                                  "src": "1039:10:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 5594,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1039:91:33",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 5576,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "1029:9:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 5595,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1029:102:33",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 5575,
                          "name": "_hashTypedDataV4",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16552,
                          "src": "999:16:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                            "typeString": "function (bytes32) view returns (bytes32)"
                          }
                        },
                        "id": 5596,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "999:142:33",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "id": 5597,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "recover",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16053,
                      "src": "999:150:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$bound_to$_t_bytes32_$",
                        "typeString": "function (bytes32,bytes memory) pure returns (address)"
                      }
                    },
                    "id": 5599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "999:161:33",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "982:178:33"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 5612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 5607,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "baseExpression": {
                          "id": 5601,
                          "name": "_nonces",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5543,
                          "src": "1177:7:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 5604,
                        "indexExpression": {
                          "expression": {
                            "id": 5602,
                            "name": "req",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5566,
                            "src": "1185:3:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                              "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                            }
                          },
                          "id": 5603,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "from",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5523,
                          "src": "1185:8:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1177:17:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 5605,
                          "name": "req",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5566,
                          "src": "1198:3:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                            "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                          }
                        },
                        "id": 5606,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "nonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5531,
                        "src": "1198:9:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1177:30:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 5611,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 5608,
                        "name": "signer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5574,
                        "src": "1211:6:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 5609,
                          "name": "req",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5566,
                          "src": "1221:3:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                            "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                          }
                        },
                        "id": 5610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "from",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5523,
                        "src": "1221:8:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "1211:18:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1177:52:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 5572,
                  "id": 5613,
                  "nodeType": "Return",
                  "src": "1170:59:33"
                }
              ]
            },
            "functionSelector": "bf5d3bdb",
            "id": 5615,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nameLocation": "883:6:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5569,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5566,
                  "mutability": "mutable",
                  "name": "req",
                  "nameLocation": "914:3:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5615,
                  "src": "890:27:33",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                    "typeString": "struct MinimalForwarder.ForwardRequest"
                  },
                  "typeName": {
                    "id": 5565,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5564,
                      "name": "ForwardRequest",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5534,
                      "src": "890:14:33"
                    },
                    "referencedDeclaration": 5534,
                    "src": "890:14:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ForwardRequest_$5534_storage_ptr",
                      "typeString": "struct MinimalForwarder.ForwardRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5568,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "934:9:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5615,
                  "src": "919:24:33",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5567,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "919:5:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "889:55:33"
            },
            "returnParameters": {
              "id": 5572,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5571,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5615,
                  "src": "966:4:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5570,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "966:4:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "965:6:33"
            },
            "scope": 5682,
            "src": "874:362:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5680,
              "nodeType": "Block",
              "src": "1386:518:33",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 5629,
                            "name": "req",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5618,
                            "src": "1411:3:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                              "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                            }
                          },
                          {
                            "id": 5630,
                            "name": "signature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5620,
                            "src": "1416:9:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                              "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                            },
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          ],
                          "id": 5628,
                          "name": "verify",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5615,
                          "src": "1404:6:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_ForwardRequest_$5534_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bool_$",
                            "typeString": "function (struct MinimalForwarder.ForwardRequest calldata,bytes calldata) view returns (bool)"
                          }
                        },
                        "id": 5631,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1404:22:33",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d696e696d616c466f727761726465723a207369676e617475726520646f6573206e6f74206d617463682072657175657374",
                        "id": 5632,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1428:52:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0a1000a56588b05caffad06969cd7617cd0867f6c7d159cd7e5aa9b3c93b18ae",
                          "typeString": "literal_string \"MinimalForwarder: signature does not match request\""
                        },
                        "value": "MinimalForwarder: signature does not match request"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0a1000a56588b05caffad06969cd7617cd0867f6c7d159cd7e5aa9b3c93b18ae",
                          "typeString": "literal_string \"MinimalForwarder: signature does not match request\""
                        }
                      ],
                      "id": 5627,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1396:7:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5633,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1396:85:33",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5634,
                  "nodeType": "ExpressionStatement",
                  "src": "1396:85:33"
                },
                {
                  "expression": {
                    "id": 5643,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 5635,
                        "name": "_nonces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5543,
                        "src": "1491:7:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 5638,
                      "indexExpression": {
                        "expression": {
                          "id": 5636,
                          "name": "req",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5618,
                          "src": "1499:3:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                            "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                          }
                        },
                        "id": 5637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "from",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5523,
                        "src": "1499:8:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1491:17:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 5642,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 5639,
                          "name": "req",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5618,
                          "src": "1511:3:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                            "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                          }
                        },
                        "id": 5640,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "nonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5531,
                        "src": "1511:9:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 5641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1523:1:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "1511:13:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1491:33:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5644,
                  "nodeType": "ExpressionStatement",
                  "src": "1491:33:33"
                },
                {
                  "assignments": [
                    5646,
                    5648
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5646,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "1541:7:33",
                      "nodeType": "VariableDeclaration",
                      "scope": 5680,
                      "src": "1536:12:33",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 5645,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1536:4:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 5648,
                      "mutability": "mutable",
                      "name": "returndata",
                      "nameLocation": "1563:10:33",
                      "nodeType": "VariableDeclaration",
                      "scope": 5680,
                      "src": "1550:23:33",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 5647,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1550:5:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5665,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 5659,
                              "name": "req",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5618,
                              "src": "1651:3:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                              }
                            },
                            "id": 5660,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "data",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5533,
                            "src": "1651:8:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          {
                            "expression": {
                              "id": 5661,
                              "name": "req",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5618,
                              "src": "1661:3:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                              }
                            },
                            "id": 5662,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "from",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5523,
                            "src": "1661:8:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 5657,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1634:3:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 5658,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "1634:16:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 5663,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1634:36:33",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 5649,
                            "name": "req",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5618,
                            "src": "1577:3:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                              "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                            }
                          },
                          "id": 5650,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "to",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5525,
                          "src": "1577:6:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 5651,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "1577:11:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 5656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "gas",
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "expression": {
                            "id": 5652,
                            "name": "req",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5618,
                            "src": "1594:3:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                              "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                            }
                          },
                          "id": 5653,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "gas",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5529,
                          "src": "1594:7:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 5654,
                            "name": "req",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5618,
                            "src": "1610:3:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                              "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                            }
                          },
                          "id": 5655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5527,
                          "src": "1610:9:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "1577:43:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gasvalue",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 5664,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1577:103:33",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1535:145:33"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 5673,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 5667,
                            "name": "gasleft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -7,
                            "src": "1833:7:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 5668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1833:9:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5672,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 5669,
                              "name": "req",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5618,
                              "src": "1845:3:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                                "typeString": "struct MinimalForwarder.ForwardRequest calldata"
                              }
                            },
                            "id": 5670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "gas",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5529,
                            "src": "1845:7:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "3633",
                            "id": 5671,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1855:2:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_63_by_1",
                              "typeString": "int_const 63"
                            },
                            "value": "63"
                          },
                          "src": "1845:12:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1833:24:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 5666,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "1826:6:33",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 5674,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1826:32:33",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5675,
                  "nodeType": "ExpressionStatement",
                  "src": "1826:32:33"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "id": 5676,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5646,
                        "src": "1877:7:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "id": 5677,
                        "name": "returndata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5648,
                        "src": "1886:10:33",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "id": 5678,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1876:21:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "functionReturnParameters": 5626,
                  "id": 5679,
                  "nodeType": "Return",
                  "src": "1869:28:33"
                }
              ]
            },
            "functionSelector": "47153f82",
            "id": 5681,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "execute",
            "nameLocation": "1251:7:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5618,
                  "mutability": "mutable",
                  "name": "req",
                  "nameLocation": "1283:3:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5681,
                  "src": "1259:27:33",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ForwardRequest_$5534_calldata_ptr",
                    "typeString": "struct MinimalForwarder.ForwardRequest"
                  },
                  "typeName": {
                    "id": 5617,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5616,
                      "name": "ForwardRequest",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5534,
                      "src": "1259:14:33"
                    },
                    "referencedDeclaration": 5534,
                    "src": "1259:14:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ForwardRequest_$5534_storage_ptr",
                      "typeString": "struct MinimalForwarder.ForwardRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5620,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "1303:9:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5681,
                  "src": "1288:24:33",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5619,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1288:5:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1258:55:33"
            },
            "returnParameters": {
              "id": 5626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5623,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5681,
                  "src": "1362:4:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5622,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1362:4:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5625,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5681,
                  "src": "1368:12:33",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5624,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1368:5:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1361:20:33"
            },
            "scope": 5682,
            "src": "1242:662:33",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 5683,
        "src": "270:1636:33",
        "usedErrors": []
      }
    ],
    "src": "33:1874:33"
  },
  "bytecode": "61012060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b6020808301918252835180850185526005815264302e302e3160d81b908201529151902060c08181527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc19916381188560e08190524660a081815286517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818901969096526060810193909352608080840192909252308382015286518084039091018152919092019094528351939092019290922090526101005260805160a05160c05160e05161010051610b2361013360003960006104be0152600061050d015260006104e80152600061046c015260006104950152610b236000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f6100543660046108a5565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b6100956100903660046108d5565b6100d3565b6040516100799291906109c6565b3480156100af57600080fd5b506100c36100be3660046108d5565b610272565b6040519015158152602001610079565b600060606100e2858585610272565b61014e5760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61015d60808601356001610a49565b60008061016d60208901896108a5565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101a791906108a5565b6001600160a01b0316606088013560408901356101c760a08b018b610a02565b6101d460208d018d6108a5565b6040516020016101e693929190610984565b60408051601f1981840301815290829052610200916109aa565b600060405180830381858888f193505050503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b509092509050610258603f6060890135610a6f565b5a1161026657610266610ac1565b90969095509350505050565b60008061038584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037f92507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e2905060208a018a6108a5565b6102f260408b0160208c016108a5565b60408b013560608c013560808d013561030e60a08f018f610a02565b60405161031c929190610974565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f0565b90610444565b9050608085013560008061039c60208901896108a5565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103e757506103d260208601866108a5565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061043e6103fd610468565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610453858561055b565b91509150610460816105cb565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156104b757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156105925760208301516040840151606085015160001a61058687828585610789565b945094505050506105c4565b8251604014156105bc57602083015160408401516105b1868383610876565b9350935050506105c4565b506000905060025b9250929050565b60008160048111156105df576105df610ad7565b14156105e85750565b60018160048111156105fc576105fc610ad7565b141561064a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610145565b600281600481111561065e5761065e610ad7565b14156106ac5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610145565b60038160048111156106c0576106c0610ad7565b14156107195760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610145565b600481600481111561072d5761072d610ad7565b14156107865760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610145565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107c0575060009050600361086d565b8460ff16601b141580156107d857508460ff16601c14155b156107e9575060009050600461086d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561083d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108665760006001925092505061086d565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161089787828885610789565b935093505050935093915050565b6000602082840312156108b757600080fd5b81356001600160a01b03811681146108ce57600080fd5b9392505050565b6000806000604084860312156108ea57600080fd5b833567ffffffffffffffff8082111561090257600080fd5b9085019060c0828803121561091657600080fd5b9093506020850135908082111561092c57600080fd5b818601915086601f83011261094057600080fd5b81358181111561094f57600080fd5b87602082850101111561096157600080fd5b6020830194508093505050509250925092565b8183823760009101908152919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600082516109bc818460208701610a91565b9190910192915050565b821515815260406020820152600082518060408401526109ed816060850160208701610a91565b601f01601f1916919091016060019392505050565b6000808335601e19843603018112610a1957600080fd5b83018035915067ffffffffffffffff821115610a3457600080fd5b6020019150368190038213156105c457600080fd5b60008219821115610a6a57634e487b7160e01b600052601160045260246000fd5b500190565b600082610a8c57634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015610aac578181015183820152602001610a94565b83811115610abb576000848401525b50505050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212201c5ccf89128f0487154c2bc710f9e6e833acb942e041d527d1c1a09e11be3d6d64736f6c63430008060033",
  "bytecodeSha1": "8cba02b8ee77bb81957ccf3fb83ba61e0c672b72",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.6+commit.11564f7e"
  },
  "contractName": "MinimalForwarder",
  "coverageMap": {
    "branches": {
      "100": {
        "ECDSA._throwError": {
          "28": [
            511,
            540,
            false
          ],
          "29": [
            607,
            645,
            false
          ],
          "30": [
            716,
            760,
            false
          ],
          "31": [
            838,
            877,
            false
          ],
          "32": [
            958,
            997,
            false
          ]
        },
        "ECDSA.tryRecover": {
          "26": [
            2449,
            2471,
            false
          ],
          "27": [
            2931,
            2953,
            false
          ],
          "33": [
            6696,
            6775,
            false
          ],
          "34": [
            6866,
            6873,
            false
          ],
          "35": [
            6877,
            6884,
            false
          ],
          "36": [
            7111,
            7131,
            false
          ]
        }
      },
      "103": {
        "EIP712._domainSeparatorV4": {
          "37": [
            3066,
            3099,
            false
          ]
        }
      },
      "33": {
        "MinimalForwarder.execute": {
          "25": [
            1404,
            1426,
            true
          ]
        }
      }
    },
    "statements": {
      "100": {
        "ECDSA._throwError": {
          "16": [
            661,
            695
          ],
          "17": [
            776,
            817
          ],
          "18": [
            893,
            937
          ],
          "19": [
            1013,
            1057
          ]
        },
        "ECDSA.recover": {
          "8": [
            4379,
            4397
          ],
          "9": [
            4407,
            4423
          ]
        },
        "ECDSA.toTypedDataHash": {
          "7": [
            8671,
            8746
          ]
        },
        "ECDSA.tryRecover": {
          "13": [
            2878,
            2910
          ],
          "14": [
            3283,
            3313
          ],
          "15": [
            3344,
            3400
          ],
          "20": [
            6791,
            6842
          ],
          "21": [
            6900,
            6951
          ],
          "22": [
            7147,
            7197
          ],
          "23": [
            7218,
            7255
          ],
          "24": [
            5024,
            5056
          ]
        }
      },
      "103": {
        "EIP712._buildDomainSeparator": {
          "11": [
            3430,
            3521
          ]
        },
        "EIP712._domainSeparatorV4": {
          "10": [
            3115,
            3146
          ],
          "12": [
            3177,
            3248
          ]
        },
        "EIP712._hashTypedDataV4": {
          "6": [
            4249,
            4311
          ]
        }
      },
      "33": {
        "MinimalForwarder.execute": {
          "1": [
            1396,
            1481
          ],
          "2": [
            1491,
            1524
          ],
          "3": [
            1826,
            1858
          ],
          "4": [
            1869,
            1897
          ]
        },
        "MinimalForwarder.getNonce": {
          "0": [
            841,
            861
          ]
        },
        "MinimalForwarder.verify": {
          "5": [
            1170,
            1229
          ]
        }
      }
    }
  },
  "dependencies": [
    "ECDSA",
    "EIP712"
  ],
  "deployedBytecode": "6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f6100543660046108a5565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b6100956100903660046108d5565b6100d3565b6040516100799291906109c6565b3480156100af57600080fd5b506100c36100be3660046108d5565b610272565b6040519015158152602001610079565b600060606100e2858585610272565b61014e5760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61015d60808601356001610a49565b60008061016d60208901896108a5565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101a791906108a5565b6001600160a01b0316606088013560408901356101c760a08b018b610a02565b6101d460208d018d6108a5565b6040516020016101e693929190610984565b60408051601f1981840301815290829052610200916109aa565b600060405180830381858888f193505050503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b509092509050610258603f6060890135610a6f565b5a1161026657610266610ac1565b90969095509350505050565b60008061038584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037f92507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e2905060208a018a6108a5565b6102f260408b0160208c016108a5565b60408b013560608c013560808d013561030e60a08f018f610a02565b60405161031c929190610974565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f0565b90610444565b9050608085013560008061039c60208901896108a5565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103e757506103d260208601866108a5565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061043e6103fd610468565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610453858561055b565b91509150610460816105cb565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156104b757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156105925760208301516040840151606085015160001a61058687828585610789565b945094505050506105c4565b8251604014156105bc57602083015160408401516105b1868383610876565b9350935050506105c4565b506000905060025b9250929050565b60008160048111156105df576105df610ad7565b14156105e85750565b60018160048111156105fc576105fc610ad7565b141561064a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610145565b600281600481111561065e5761065e610ad7565b14156106ac5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610145565b60038160048111156106c0576106c0610ad7565b14156107195760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610145565b600481600481111561072d5761072d610ad7565b14156107865760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610145565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107c0575060009050600361086d565b8460ff16601b141580156107d857508460ff16601c14155b156107e9575060009050600461086d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561083d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108665760006001925092505061086d565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161089787828885610789565b935093505050935093915050565b6000602082840312156108b757600080fd5b81356001600160a01b03811681146108ce57600080fd5b9392505050565b6000806000604084860312156108ea57600080fd5b833567ffffffffffffffff8082111561090257600080fd5b9085019060c0828803121561091657600080fd5b9093506020850135908082111561092c57600080fd5b818601915086601f83011261094057600080fd5b81358181111561094f57600080fd5b87602082850101111561096157600080fd5b6020830194508093505050509250925092565b8183823760009101908152919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600082516109bc818460208701610a91565b9190910192915050565b821515815260406020820152600082518060408401526109ed816060850160208701610a91565b601f01601f1916919091016060019392505050565b6000808335601e19843603018112610a1957600080fd5b83018035915067ffffffffffffffff821115610a3457600080fd5b6020019150368190038213156105c457600080fd5b60008219821115610a6a57634e487b7160e01b600052601160045260246000fd5b500190565b600082610a8c57634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015610aac578181015183820152602001610a94565b83811115610abb576000848401525b50505050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212201c5ccf89128f0487154c2bc710f9e6e833acb942e041d527d1c1a09e11be3d6d64736f6c63430008060033",
  "deployedSourceMap": "270:1636:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;769:99;;;;;;;;;;-1:-1:-1;769:99:33;;;;;:::i;:::-;-1:-1:-1;;;;;848:13:33;822:7;848:13;;;;;;;;;;;;769:99;;;;6820:25:121;;;6808:2;6793:18;769:99:33;;;;;;;;1242:662;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;874:362::-;;;;;;;;;;-1:-1:-1;874:362:33;;;;;:::i;:::-;;:::i;:::-;;;2677:14:121;;2670:22;2652:41;;2640:2;2625:18;874:362:33;2607:92:121;1242:662:33;1362:4;1368:12;1404:22;1411:3;1416:9;;1404:6;:22::i;:::-;1396:85;;;;-1:-1:-1;;;1396:85:33;;5291:2:121;1396:85:33;;;5273:21:121;5330:2;5310:18;;;5303:30;5369:34;5349:18;;;5342:62;-1:-1:-1;;;5420:18:121;;;5413:48;5478:19;;1396:85:33;;;;;;;;;1511:13;:9;;;;1523:1;1511:13;:::i;:::-;1491:7;;1499:8;;;;:3;:8;:::i;:::-;-1:-1:-1;;;;;1491:17:33;-1:-1:-1;;;;;1491:17:33;;;;;;;;;;;;:33;;;;1536:12;1550:23;1577:3;:6;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1577:11:33;1594:7;;;;1610:9;;;;1651:8;;;;1594:3;1651:8;:::i;:::-;1661;;;;:3;:8;:::i;:::-;1634:36;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1634:36:33;;;;;;;;;;1577:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1535:145:33;;-1:-1:-1;1535:145:33;-1:-1:-1;1845:12:33;1855:2;1845:7;;;;:12;:::i;:::-;1833:9;:24;1826:32;;;;:::i;:::-;1877:7;;;;-1:-1:-1;1242:662:33;-1:-1:-1;;;;1242:662:33:o;874:362::-;966:4;982:14;999:161;1150:9;;999:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;999:142:33;;-1:-1:-1;551:103:33;;-1:-1:-1;1061:8:33;;-1:-1:-1;1061:8:33;;;:3;:8;:::i;:::-;1071:6;;;;;;;;:::i;:::-;1079:9;;;;1090:7;;;;1099:9;;;;1120:8;;;;1079:3;1120:8;:::i;:::-;1110:19;;;;;;;:::i;:::-;;;;;;;;;;1039:91;;;3486:25:121;;;;-1:-1:-1;;;;;3585:15:121;;;3565:18;;;3558:43;3637:15;;;;3617:18;;;3610:43;3669:18;;;3662:34;;;;3712:19;;;3705:35;3756:19;;;3749:35;3800:19;;;3793:35;;;;3458:19;;1039:91:33;;;;;;;;;;;;1029:102;;;;;;999:16;:142::i;:::-;:150;;:161::i;:::-;982:178;-1:-1:-1;1198:9:33;;;;1177:7;;1185:8;;;;1198:3;1185:8;:::i;:::-;-1:-1:-1;;;;;1177:17:33;-1:-1:-1;;;;;1177:17:33;;;;;;;;;;;;;:30;:52;;;;-1:-1:-1;1221:8:33;;;;:3;:8;:::i;:::-;-1:-1:-1;;;;;1211:18:33;:6;-1:-1:-1;;;;;1211:18:33;;1177:52;1170:59;874:362;-1:-1:-1;;;;;874:362:33:o;4153:165:103:-;4230:7;4256:55;4278:20;:18;:20::i;:::-;4300:10;8688:57:100;;-1:-1:-1;;;8688:57:100;;;2373:27:121;2416:11;;;2409:27;;;2452:12;;;2445:28;;;8652:7:100;;2489:12:121;;8688:57:100;;;;;;;;;;;;8678:68;;;;;;8671:75;;8559:194;;;;;4256:55:103;4249:62;4153:165;-1:-1:-1;;4153:165:103:o;4203:227:100:-;4281:7;4301:17;4320:18;4342:27;4353:4;4359:9;4342:10;:27::i;:::-;4300:69;;;;4379:18;4391:5;4379:11;:18::i;:::-;-1:-1:-1;4414:9:100;4203:227;-1:-1:-1;;;4203:227:100:o;2990:275:103:-;3043:7;3083:16;3066:13;:33;3062:197;;;-1:-1:-1;3122:24:103;;2990:275::o;3062:197::-;-1:-1:-1;3447:73:103;;;3206:10;3447:73;;;;4098:25:121;;;;3218:12:103;4139:18:121;;;4132:34;3232:15:103;4182:18:121;;;4175:34;3491:13:103;4225:18:121;;;4218:34;3514:4:103;4268:19:121;;;;4261:61;;;;3447:73:103;;;;;;;;;;4070:19:121;;;;3447:73:103;;;3437:84;;;;;;2990:275::o;2138:1279:100:-;2219:7;2228:12;2449:9;:16;2469:2;2449:22;2445:966;;;2738:4;2723:20;;2717:27;2787:4;2772:20;;2766:27;2844:4;2829:20;;2823:27;2487:9;2815:36;2885:25;2896:4;2815:36;2717:27;2766;2885:10;:25::i;:::-;2878:32;;;;;;;;;2445:966;2931:9;:16;2951:2;2931:22;2927:484;;;3200:4;3185:20;;3179:27;3250:4;3235:20;;3229:27;3290:23;3301:4;3179:27;3229;3290:10;:23::i;:::-;3283:30;;;;;;;;2927:484;-1:-1:-1;3360:1:100;;-1:-1:-1;3364:35:100;2927:484;2138:1279;;;;;:::o;443:631::-;520:20;511:5;:29;;;;;;;;:::i;:::-;;507:561;;;443:631;:::o;507:561::-;616:29;607:5;:38;;;;;;;;:::i;:::-;;603:465;;;661:34;;-1:-1:-1;;;661:34:100;;4938:2:121;661:34:100;;;4920:21:121;4977:2;4957:18;;;4950:30;5016:26;4996:18;;;4989:54;5060:18;;661:34:100;4910:174:121;603:465:100;725:35;716:5;:44;;;;;;;;:::i;:::-;;712:356;;;776:41;;-1:-1:-1;;;776:41:100;;5710:2:121;776:41:100;;;5692:21:121;5749:2;5729:18;;;5722:30;5788:33;5768:18;;;5761:61;5839:18;;776:41:100;5682:181:121;712:356:100;847:30;838:5;:39;;;;;;;;:::i;:::-;;834:234;;;893:44;;-1:-1:-1;;;893:44:100;;6070:2:121;893:44:100;;;6052:21:121;6109:2;6089:18;;;6082:30;6148:34;6128:18;;;6121:62;-1:-1:-1;;;6199:18:121;;;6192:32;6241:19;;893:44:100;6042:224:121;834:234:100;967:30;958:5;:39;;;;;;;;:::i;:::-;;954:114;;;1013:44;;-1:-1:-1;;;1013:44:100;;6473:2:121;1013:44:100;;;6455:21:121;6512:2;6492:18;;;6485:30;6551:34;6531:18;;;6524:62;-1:-1:-1;;;6602:18:121;;;6595:32;6644:19;;1013:44:100;6445:224:121;954:114:100;443:631;:::o;5654:1608::-;5780:7;;6709:66;6696:79;;6692:161;;;-1:-1:-1;6807:1:100;;-1:-1:-1;6811:30:100;6791:51;;6692:161;6866:1;:7;;6871:2;6866:7;;:18;;;;;6877:1;:7;;6882:2;6877:7;;6866:18;6862:100;;;-1:-1:-1;6916:1:100;;-1:-1:-1;6920:30:100;6900:51;;6862:100;7073:24;;;7056:14;7073:24;;;;;;;;;4560:25:121;;;4633:4;4621:17;;4601:18;;;4594:45;;;;4655:18;;;4648:34;;;4698:18;;;4691:34;;;7073:24:100;;4532:19:121;;7073:24:100;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7073:24:100;;-1:-1:-1;;7073:24:100;;;-1:-1:-1;;;;;;;7111:20:100;;7107:101;;7163:1;7167:29;7147:50;;;;;;;7107:101;7226:6;-1:-1:-1;7234:20:100;;-1:-1:-1;5654:1608:100;;;;;;;;:::o;4684:379::-;4794:7;;-1:-1:-1;;;;;4891:75:100;;4992:3;4988:12;;;5002:2;4984:21;5031:25;5042:4;4984:21;5051:1;4891:75;5031:10;:25::i;:::-;5024:32;;;;;;4684:379;;;;;;:::o;14:286:121:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;142:1;139;132:12;94:2;168:23;;-1:-1:-1;;;;;220:31:121;;210:42;;200:2;;266:1;263;256:12;200:2;289:5;84:216;-1:-1:-1;;;84:216:121:o;305:863::-;418:6;426;434;487:2;475:9;466:7;462:23;458:32;455:2;;;503:1;500;493:12;455:2;543:9;530:23;572:18;613:2;605:6;602:14;599:2;;;629:1;626;619:12;599:2;652:22;;;;708:3;690:16;;;686:26;683:2;;;725:1;722;715:12;683:2;748;;-1:-1:-1;803:2:121;788:18;;775:32;;819:16;;;816:2;;;848:1;845;838:12;816:2;886:8;875:9;871:24;861:34;;933:7;926:4;922:2;918:13;914:27;904:2;;955:1;952;945:12;904:2;995;982:16;1021:2;1013:6;1010:14;1007:2;;;1037:1;1034;1027:12;1007:2;1082:7;1077:2;1068:6;1064:2;1060:15;1056:24;1053:37;1050:2;;;1103:1;1100;1093:12;1050:2;1134;1130;1126:11;1116:21;;1156:6;1146:16;;;;;445:723;;;;;:::o;1173:271::-;1356:6;1348;1343:3;1330:33;1312:3;1382:16;;1407:13;;;1382:16;1320:124;-1:-1:-1;1320:124:121:o;1449:382::-;1660:6;1652;1647:3;1634:33;1752:2;1748:15;;;;-1:-1:-1;;1744:53:121;1686:16;;1733:65;;;1822:2;1814:11;;1624:207;-1:-1:-1;1624:207:121:o;1836:274::-;1965:3;2003:6;1997:13;2019:53;2065:6;2060:3;2053:4;2045:6;2041:17;2019:53;:::i;:::-;2088:16;;;;;1973:137;-1:-1:-1;;1973:137:121:o;2704:462::-;2887:6;2880:14;2873:22;2862:9;2855:41;2932:2;2927;2916:9;2912:18;2905:30;2836:4;2964:6;2958:13;3007:6;3002:2;2991:9;2987:18;2980:34;3023:66;3082:6;3077:2;3066:9;3062:18;3057:2;3049:6;3045:15;3023:66;:::i;:::-;3150:2;3129:15;-1:-1:-1;;3125:29:121;3110:45;;;;3157:2;3106:54;;2845:321;-1:-1:-1;;;2845:321:121:o;6856:521::-;6933:4;6939:6;6999:11;6986:25;7093:2;7089:7;7078:8;7062:14;7058:29;7054:43;7034:18;7030:68;7020:2;;7112:1;7109;7102:12;7020:2;7139:33;;7191:20;;;-1:-1:-1;7234:18:121;7223:30;;7220:2;;;7266:1;7263;7256:12;7220:2;7299:4;7287:17;;-1:-1:-1;7330:14:121;7326:27;;;7316:38;;7313:2;;;7367:1;7364;7357:12;7382:225;7422:3;7453:1;7449:6;7446:1;7443:13;7440:2;;;7498:10;7493:3;7489:20;7486:1;7479:31;7533:4;7530:1;7523:15;7561:4;7558:1;7551:15;7440:2;-1:-1:-1;7592:9:121;;7430:177::o;7612:217::-;7652:1;7678;7668:2;;7722:10;7717:3;7713:20;7710:1;7703:31;7757:4;7754:1;7747:15;7785:4;7782:1;7775:15;7668:2;-1:-1:-1;7814:9:121;;7658:171::o;7834:258::-;7906:1;7916:113;7930:6;7927:1;7924:13;7916:113;;;8006:11;;;8000:18;7987:11;;;7980:39;7952:2;7945:10;7916:113;;;8047:6;8044:1;8041:13;8038:2;;;8082:1;8073:6;8068:3;8064:16;8057:27;8038:2;;7887:205;;;:::o;8097:127::-;8158:10;8153:3;8149:20;8146:1;8139:31;8189:4;8186:1;8179:15;8213:4;8210:1;8203:15;8229:127;8290:10;8285:3;8281:20;8278:1;8271:31;8321:4;8318:1;8311:15;8345:4;8342:1;8335:15",
  "language": "Solidity",
  "natspec": {
    "details": "Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    270,
    1906
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2D0335AB EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x47153F82 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xBF5D3BDB EQ PUSH2 0xA3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D5 JUMP JUMPDEST PUSH2 0xD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x79 SWAP3 SWAP2 SWAP1 PUSH2 0x9C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3 PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x8D5 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0xE2 DUP6 DUP6 DUP6 PUSH2 0x272 JUMP JUMPDEST PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696E696D616C466F727761726465723A207369676E617475726520646F6573 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x81B9BDD081B585D18DA081C995C5D595CDD PUSH1 0x72 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15D PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x16D PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 DUP7 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x1C7 PUSH1 0xA0 DUP12 ADD DUP12 PUSH2 0xA02 JUMP JUMPDEST PUSH2 0x1D4 PUSH1 0x20 DUP14 ADD DUP14 PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1E6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x200 SWAP2 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x243 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x258 PUSH1 0x3F PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH2 0xA6F JUMP JUMPDEST GAS GT PUSH2 0x266 JUMPI PUSH2 0x266 PUSH2 0xAC1 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x385 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x37F SWAP3 POP PUSH32 0xDD8F4B70B0F4393E889BD39128A30628A78B61816A9EB8199759E7A349657E48 SWAP2 POP PUSH2 0x2E2 SWAP1 POP PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x8A5 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x40 DUP12 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x40 DUP12 ADD CALLDATALOAD PUSH1 0x60 DUP13 ADD CALLDATALOAD PUSH1 0x80 DUP14 ADD CALLDATALOAD PUSH2 0x30E PUSH1 0xA0 DUP16 ADD DUP16 PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31C SWAP3 SWAP2 SWAP1 PUSH2 0x974 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x20 DUP4 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP1 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x3F0 JUMP JUMPDEST SWAP1 PUSH2 0x444 JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x0 DUP1 PUSH2 0x39C PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ DUP1 ISZERO PUSH2 0x3E7 JUMPI POP PUSH2 0x3D2 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43E PUSH2 0x3FD PUSH2 0x468 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x453 DUP6 DUP6 PUSH2 0x55B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x460 DUP2 PUSH2 0x5CB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CHAINID EQ ISZERO PUSH2 0x4B7 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 EQ ISZERO PUSH2 0x592 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x586 DUP8 DUP3 DUP6 DUP6 PUSH2 0x789 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x5C4 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 EQ ISZERO PUSH2 0x5BC JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x5B1 DUP7 DUP4 DUP4 PUSH2 0x876 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x5C4 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x5DF JUMPI PUSH2 0x5DF PUSH2 0xAD7 JUMP JUMPDEST EQ ISZERO PUSH2 0x5E8 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x5FC JUMPI PUSH2 0x5FC PUSH2 0xAD7 JUMP JUMPDEST EQ ISZERO PUSH2 0x64A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x145 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x65E JUMPI PUSH2 0x65E PUSH2 0xAD7 JUMP JUMPDEST EQ ISZERO PUSH2 0x6AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x145 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x6C0 JUMPI PUSH2 0x6C0 PUSH2 0xAD7 JUMP JUMPDEST EQ ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x145 JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x72D JUMPI PUSH2 0x72D PUSH2 0xAD7 JUMP JUMPDEST EQ ISZERO PUSH2 0x786 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x145 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x7C0 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x86D JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x7D8 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x7E9 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x86D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x866 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x86D JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 AND PUSH1 0xFF DUP5 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x897 DUP8 DUP3 DUP9 DUP6 PUSH2 0x789 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP6 ADD SWAP1 PUSH1 0xC0 DUP3 DUP9 SUB SLT ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x92C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x940 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x94F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9BC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA91 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x9ED DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA91 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x60 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xA34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA6A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA8C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAAC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA94 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xABB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0x5C 0xCF DUP10 SLT DUP16 DIV DUP8 ISZERO 0x4C 0x2B 0xC7 LT 0xF9 0xE6 0xE8 CALLER 0xAC 0xB9 TIMESTAMP 0xE0 COINBASE 0xD5 0x27 0xD1 0xC1 LOG0 SWAP15 GT 0xBE RETURNDATASIZE PUSH14 0x64736F6C63430008060033000000 ",
  "pcMap": {
    "0": {
      "offset": [
        270,
        1906
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "5": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "CALLDATASIZE",
      "path": "33"
    },
    "8": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "LT",
      "path": "33"
    },
    "9": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x34"
    },
    "12": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "13": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "16": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "SHR",
      "path": "33"
    },
    "19": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "DUP1",
      "path": "33"
    },
    "20": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH4",
      "path": "33",
      "value": "0x2D0335AB"
    },
    "25": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "EQ",
      "path": "33"
    },
    "26": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x39"
    },
    "29": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "30": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "DUP1",
      "path": "33"
    },
    "31": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH4",
      "path": "33",
      "value": "0x47153F82"
    },
    "36": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "EQ",
      "path": "33"
    },
    "37": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x82"
    },
    "40": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "41": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "DUP1",
      "path": "33"
    },
    "42": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH4",
      "path": "33",
      "value": "0xBF5D3BDB"
    },
    "47": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "EQ",
      "path": "33"
    },
    "48": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xA3"
    },
    "51": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "52": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "53": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "55": {
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "DUP1",
      "path": "33"
    },
    "56": {
      "first_revert": true,
      "fn": null,
      "offset": [
        270,
        1906
      ],
      "op": "REVERT",
      "path": "33"
    },
    "57": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "58": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "CALLVALUE",
      "path": "33"
    },
    "59": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "DUP1",
      "path": "33"
    },
    "60": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "ISZERO",
      "path": "33"
    },
    "61": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x45"
    },
    "64": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "65": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "67": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "DUP1",
      "path": "33"
    },
    "68": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "REVERT",
      "path": "33"
    },
    "69": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "70": {
      "op": "POP"
    },
    "71": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x6F"
    },
    "74": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x54"
    },
    "77": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "CALLDATASIZE",
      "path": "33"
    },
    "78": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x4"
    },
    "80": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "83": {
      "fn": "MinimalForwarder.getNonce",
      "jump": "i",
      "offset": [
        769,
        868
      ],
      "op": "JUMP",
      "path": "33"
    },
    "84": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "85": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "87": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "89": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "91": {
      "op": "SHL"
    },
    "92": {
      "op": "SUB"
    },
    "93": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "AND",
      "path": "33",
      "statement": 0
    },
    "94": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        822,
        829
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "96": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "97": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "DUP2",
      "path": "33"
    },
    "98": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "99": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "101": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "DUP2",
      "path": "33"
    },
    "102": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "103": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "104": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "106": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "107": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "KECCAK256",
      "path": "33"
    },
    "108": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "SLOAD",
      "path": "33"
    },
    "109": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        848,
        861
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "110": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMP",
      "path": "33"
    },
    "111": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "112": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "114": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "115": {
      "op": "SWAP1"
    },
    "116": {
      "op": "DUP2"
    },
    "117": {
      "op": "MSTORE"
    },
    "118": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "120": {
      "op": "ADD"
    },
    "121": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "122": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "124": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "125": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "DUP1",
      "path": "33"
    },
    "126": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "127": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "SUB",
      "path": "33"
    },
    "128": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "129": {
      "fn": "MinimalForwarder.getNonce",
      "offset": [
        769,
        868
      ],
      "op": "RETURN",
      "path": "33"
    },
    "130": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "131": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x95"
    },
    "134": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x90"
    },
    "137": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "CALLDATASIZE",
      "path": "33"
    },
    "138": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x4"
    },
    "140": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8D5"
    },
    "143": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMP",
      "path": "33"
    },
    "144": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "145": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xD3"
    },
    "148": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMP",
      "path": "33"
    },
    "149": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "150": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "152": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "153": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x79"
    },
    "156": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "157": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "158": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "159": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x9C6"
    },
    "162": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMP",
      "path": "33"
    },
    "163": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "164": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "CALLVALUE",
      "path": "33"
    },
    "165": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "DUP1",
      "path": "33"
    },
    "166": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "ISZERO",
      "path": "33"
    },
    "167": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xAF"
    },
    "170": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "171": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "173": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "DUP1",
      "path": "33"
    },
    "174": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "REVERT",
      "path": "33"
    },
    "175": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "176": {
      "op": "POP"
    },
    "177": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xC3"
    },
    "180": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xBE"
    },
    "183": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "CALLDATASIZE",
      "path": "33"
    },
    "184": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x4"
    },
    "186": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8D5"
    },
    "189": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        874,
        1236
      ],
      "op": "JUMP",
      "path": "33"
    },
    "190": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "191": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x272"
    },
    "194": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        874,
        1236
      ],
      "op": "JUMP",
      "path": "33"
    },
    "195": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "196": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "198": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "199": {
      "op": "SWAP1"
    },
    "200": {
      "op": "ISZERO"
    },
    "201": {
      "op": "ISZERO"
    },
    "202": {
      "op": "DUP2"
    },
    "203": {
      "op": "MSTORE"
    },
    "204": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "206": {
      "op": "ADD"
    },
    "207": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x79"
    },
    "210": {
      "op": "JUMP"
    },
    "211": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "212": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1362,
        1366
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "214": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1368,
        1380
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x60"
    },
    "216": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1404,
        1426
      ],
      "op": "PUSH2",
      "path": "33",
      "statement": 1,
      "value": "0xE2"
    },
    "219": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1411,
        1414
      ],
      "op": "DUP6",
      "path": "33"
    },
    "220": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1416,
        1425
      ],
      "op": "DUP6",
      "path": "33"
    },
    "221": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1416,
        1425
      ],
      "op": "DUP6",
      "path": "33"
    },
    "222": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1404,
        1410
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x272"
    },
    "225": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1404,
        1426
      ],
      "op": "JUMP",
      "path": "33"
    },
    "226": {
      "branch": 25,
      "fn": "MinimalForwarder.execute",
      "offset": [
        1404,
        1426
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "227": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x14E"
    },
    "230": {
      "branch": 25,
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "231": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "233": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "234": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "238": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "240": {
      "op": "SHL"
    },
    "241": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "DUP2",
      "path": "33"
    },
    "242": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "243": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "245": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x4"
    },
    "247": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "DUP3",
      "path": "33"
    },
    "248": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "ADD",
      "path": "33"
    },
    "249": {
      "op": "MSTORE"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "252": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "254": {
      "op": "DUP3"
    },
    "255": {
      "op": "ADD"
    },
    "256": {
      "op": "MSTORE"
    },
    "257": {
      "op": "PUSH32",
      "value": "0x4D696E696D616C466F727761726465723A207369676E617475726520646F6573"
    },
    "290": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "292": {
      "op": "DUP3"
    },
    "293": {
      "op": "ADD"
    },
    "294": {
      "op": "MSTORE"
    },
    "295": {
      "op": "PUSH18",
      "value": "0x81B9BDD081B585D18DA081C995C5D595CDD"
    },
    "314": {
      "op": "PUSH1",
      "value": "0x72"
    },
    "316": {
      "op": "SHL"
    },
    "317": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "319": {
      "op": "DUP3"
    },
    "320": {
      "op": "ADD"
    },
    "321": {
      "op": "MSTORE"
    },
    "322": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "324": {
      "op": "ADD"
    },
    "325": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "326": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "328": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "329": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "DUP1",
      "path": "33"
    },
    "330": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "331": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "SUB",
      "path": "33"
    },
    "332": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "333": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "33"
    },
    "334": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1396,
        1481
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "335": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1524
      ],
      "op": "PUSH2",
      "path": "33",
      "statement": 2,
      "value": "0x15D"
    },
    "338": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1520
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x80"
    },
    "340": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1520
      ],
      "op": "DUP7",
      "path": "33"
    },
    "341": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1520
      ],
      "op": "ADD",
      "path": "33"
    },
    "342": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1520
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "343": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1523,
        1524
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x1"
    },
    "345": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1524
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xA49"
    },
    "348": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1511,
        1524
      ],
      "op": "JUMP",
      "path": "33"
    },
    "349": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1511,
        1524
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "350": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1498
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "352": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1498
      ],
      "op": "DUP1",
      "path": "33"
    },
    "353": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1507
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x16D"
    },
    "356": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1507
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "358": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1507
      ],
      "op": "DUP10",
      "path": "33"
    },
    "359": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1507
      ],
      "op": "ADD",
      "path": "33"
    },
    "360": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1502
      ],
      "op": "DUP10",
      "path": "33"
    },
    "361": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1507
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "364": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1499,
        1507
      ],
      "op": "JUMP",
      "path": "33"
    },
    "365": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1499,
        1507
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "370": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "372": {
      "op": "SHL"
    },
    "373": {
      "op": "SUB"
    },
    "374": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "AND",
      "path": "33"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "379": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "381": {
      "op": "SHL"
    },
    "382": {
      "op": "SUB"
    },
    "383": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "AND",
      "path": "33"
    },
    "384": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "DUP2",
      "path": "33"
    },
    "385": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "386": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "388": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "ADD",
      "path": "33"
    },
    "389": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "390": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "DUP2",
      "path": "33"
    },
    "391": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "392": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "394": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "ADD",
      "path": "33"
    },
    "395": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "397": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1508
      ],
      "op": "KECCAK256",
      "path": "33"
    },
    "398": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1524
      ],
      "op": "DUP2",
      "path": "33"
    },
    "399": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1524
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "400": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1524
      ],
      "op": "SSTORE",
      "path": "33"
    },
    "401": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1491,
        1524
      ],
      "op": "POP",
      "path": "33"
    },
    "402": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1536,
        1548
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "404": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1550,
        1573
      ],
      "op": "DUP1",
      "path": "33"
    },
    "405": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1580
      ],
      "op": "DUP7",
      "path": "33"
    },
    "406": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "408": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "ADD",
      "path": "33"
    },
    "409": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "411": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "DUP2",
      "path": "33"
    },
    "412": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "ADD",
      "path": "33"
    },
    "413": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "414": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x1A7"
    },
    "417": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "418": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "419": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "422": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1577,
        1583
      ],
      "op": "JUMP",
      "path": "33"
    },
    "423": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1583
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "424": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "428": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "430": {
      "op": "SHL"
    },
    "431": {
      "op": "SUB"
    },
    "432": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1588
      ],
      "op": "AND",
      "path": "33"
    },
    "433": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1594,
        1601
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x60"
    },
    "435": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1594,
        1601
      ],
      "op": "DUP9",
      "path": "33"
    },
    "436": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1594,
        1601
      ],
      "op": "ADD",
      "path": "33"
    },
    "437": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1594,
        1601
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "438": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1610,
        1619
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "440": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1610,
        1619
      ],
      "op": "DUP10",
      "path": "33"
    },
    "441": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1610,
        1619
      ],
      "op": "ADD",
      "path": "33"
    },
    "442": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1610,
        1619
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "443": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1651,
        1659
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x1C7"
    },
    "446": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1651,
        1659
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0xA0"
    },
    "448": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1651,
        1659
      ],
      "op": "DUP12",
      "path": "33"
    },
    "449": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1651,
        1659
      ],
      "op": "ADD",
      "path": "33"
    },
    "450": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1594,
        1597
      ],
      "op": "DUP12",
      "path": "33"
    },
    "451": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1651,
        1659
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xA02"
    },
    "454": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1651,
        1659
      ],
      "op": "JUMP",
      "path": "33"
    },
    "455": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1651,
        1659
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "456": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1669
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x1D4"
    },
    "459": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1669
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "461": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1669
      ],
      "op": "DUP14",
      "path": "33"
    },
    "462": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1669
      ],
      "op": "ADD",
      "path": "33"
    },
    "463": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1664
      ],
      "op": "DUP14",
      "path": "33"
    },
    "464": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1669
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "467": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1661,
        1669
      ],
      "op": "JUMP",
      "path": "33"
    },
    "468": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1661,
        1669
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "469": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "471": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "472": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "474": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "ADD",
      "path": "33"
    },
    "475": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x1E6"
    },
    "478": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SWAP4",
      "path": "33"
    },
    "479": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "480": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "481": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "482": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x984"
    },
    "485": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1634,
        1670
      ],
      "op": "JUMP",
      "path": "33"
    },
    "486": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "487": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "489": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "DUP1",
      "path": "33"
    },
    "490": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "491": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "493": {
      "op": "NOT"
    },
    "494": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "DUP2",
      "path": "33"
    },
    "495": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "DUP5",
      "path": "33"
    },
    "496": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SUB",
      "path": "33"
    },
    "497": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "ADD",
      "path": "33"
    },
    "498": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "DUP2",
      "path": "33"
    },
    "499": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "500": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "501": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "DUP3",
      "path": "33"
    },
    "502": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "503": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1634,
        1670
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "504": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x200"
    },
    "507": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "508": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x9AA"
    },
    "511": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1577,
        1680
      ],
      "op": "JUMP",
      "path": "33"
    },
    "512": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "513": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "515": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "517": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "518": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP1",
      "path": "33"
    },
    "519": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP4",
      "path": "33"
    },
    "520": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "SUB",
      "path": "33"
    },
    "521": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP2",
      "path": "33"
    },
    "522": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP6",
      "path": "33"
    },
    "523": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP9",
      "path": "33"
    },
    "524": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP9",
      "path": "33"
    },
    "525": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "CALL",
      "path": "33"
    },
    "526": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "SWAP4",
      "path": "33"
    },
    "527": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "POP",
      "path": "33"
    },
    "528": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "POP",
      "path": "33"
    },
    "529": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "POP",
      "path": "33"
    },
    "530": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "POP",
      "path": "33"
    },
    "531": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "RETURNDATASIZE",
      "path": "33"
    },
    "532": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP1",
      "path": "33"
    },
    "533": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "535": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP2",
      "path": "33"
    },
    "536": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "EQ",
      "path": "33"
    },
    "537": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x23E"
    },
    "540": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "541": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "543": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "544": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "545": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "POP",
      "path": "33"
    },
    "546": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x1F"
    },
    "548": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "NOT",
      "path": "33"
    },
    "549": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x3F"
    },
    "551": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "RETURNDATASIZE",
      "path": "33"
    },
    "552": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "ADD",
      "path": "33"
    },
    "553": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "AND",
      "path": "33"
    },
    "554": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP3",
      "path": "33"
    },
    "555": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "ADD",
      "path": "33"
    },
    "556": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "558": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "559": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "RETURNDATASIZE",
      "path": "33"
    },
    "560": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP3",
      "path": "33"
    },
    "561": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "562": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "RETURNDATASIZE",
      "path": "33"
    },
    "563": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "565": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "567": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "DUP5",
      "path": "33"
    },
    "568": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "ADD",
      "path": "33"
    },
    "569": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "RETURNDATACOPY",
      "path": "33"
    },
    "570": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x243"
    },
    "573": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "JUMP",
      "path": "33"
    },
    "574": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "575": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x60"
    },
    "577": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "578": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "POP",
      "path": "33"
    },
    "579": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1577,
        1680
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "580": {
      "op": "POP"
    },
    "581": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1535,
        1680
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "582": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1535,
        1680
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "583": {
      "op": "POP"
    },
    "584": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1535,
        1680
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "585": {
      "op": "POP"
    },
    "586": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1857
      ],
      "op": "PUSH2",
      "path": "33",
      "statement": 3,
      "value": "0x258"
    },
    "589": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1855,
        1857
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x3F"
    },
    "591": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1852
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x60"
    },
    "593": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1852
      ],
      "op": "DUP10",
      "path": "33"
    },
    "594": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1852
      ],
      "op": "ADD",
      "path": "33"
    },
    "595": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1852
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "596": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1857
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xA6F"
    },
    "599": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1845,
        1857
      ],
      "op": "JUMP",
      "path": "33"
    },
    "600": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1845,
        1857
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "601": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1833,
        1842
      ],
      "op": "GAS",
      "path": "33"
    },
    "602": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1833,
        1857
      ],
      "op": "GT",
      "path": "33"
    },
    "603": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1826,
        1858
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x266"
    },
    "606": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1826,
        1858
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "607": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1826,
        1858
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x266"
    },
    "610": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1826,
        1858
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xAC1"
    },
    "613": {
      "fn": "MinimalForwarder.execute",
      "jump": "i",
      "offset": [
        1826,
        1858
      ],
      "op": "JUMP",
      "path": "33"
    },
    "614": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1826,
        1858
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "615": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1877,
        1884
      ],
      "op": "SWAP1",
      "path": "33",
      "statement": 4
    },
    "616": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1877,
        1884
      ],
      "op": "SWAP7",
      "path": "33"
    },
    "617": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1877,
        1884
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "618": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1877,
        1884
      ],
      "op": "SWAP6",
      "path": "33"
    },
    "619": {
      "op": "POP"
    },
    "620": {
      "fn": "MinimalForwarder.execute",
      "offset": [
        1242,
        1904
      ],
      "op": "SWAP4",
      "path": "33"
    },
    "621": {
      "op": "POP"
    },
    "622": {
      "op": "POP"
    },
    "623": {
      "op": "POP"
    },
    "624": {
      "op": "POP"
    },
    "625": {
      "fn": "MinimalForwarder.execute",
      "jump": "o",
      "offset": [
        1242,
        1904
      ],
      "op": "JUMP",
      "path": "33"
    },
    "626": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "627": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        966,
        970
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "629": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        982,
        996
      ],
      "op": "DUP1",
      "path": "33"
    },
    "630": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x385"
    },
    "633": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1150,
        1159
      ],
      "op": "DUP5",
      "path": "33"
    },
    "634": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1150,
        1159
      ],
      "op": "DUP5",
      "path": "33"
    },
    "635": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP1",
      "path": "33"
    },
    "636": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP1",
      "path": "33"
    },
    "637": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x1F"
    },
    "639": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "ADD",
      "path": "33"
    },
    "640": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "642": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP1",
      "path": "33"
    },
    "643": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "644": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DIV",
      "path": "33"
    },
    "645": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "MUL",
      "path": "33"
    },
    "646": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "648": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "ADD",
      "path": "33"
    },
    "649": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "651": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "652": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "653": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP2",
      "path": "33"
    },
    "654": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "ADD",
      "path": "33"
    },
    "655": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "657": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "658": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP1",
      "path": "33"
    },
    "659": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP4",
      "path": "33"
    },
    "660": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "661": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "662": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "663": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP2",
      "path": "33"
    },
    "664": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP2",
      "path": "33"
    },
    "665": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "666": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "668": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "ADD",
      "path": "33"
    },
    "669": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP4",
      "path": "33"
    },
    "670": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP4",
      "path": "33"
    },
    "671": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP1",
      "path": "33"
    },
    "672": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP3",
      "path": "33"
    },
    "673": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "DUP5",
      "path": "33"
    },
    "674": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "CALLDATACOPY",
      "path": "33"
    },
    "675": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "677": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "678": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "ADD",
      "path": "33"
    },
    "679": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "680": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "681": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "682": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "683": {
      "op": "POP"
    },
    "684": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1141
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x37F"
    },
    "687": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1141
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "688": {
      "op": "POP"
    },
    "689": {
      "offset": [
        551,
        654
      ],
      "op": "PUSH32",
      "path": "33",
      "value": "0xDD8F4B70B0F4393E889BD39128A30628A78B61816A9EB8199759E7A349657E48"
    },
    "722": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        551,
        654
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "723": {
      "op": "POP"
    },
    "724": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x2E2"
    },
    "727": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "728": {
      "op": "POP"
    },
    "729": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "731": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "DUP11",
      "path": "33"
    },
    "732": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "ADD",
      "path": "33"
    },
    "733": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1064
      ],
      "op": "DUP11",
      "path": "33"
    },
    "734": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "737": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        1061,
        1069
      ],
      "op": "JUMP",
      "path": "33"
    },
    "738": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1061,
        1069
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "739": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x2F2"
    },
    "742": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "744": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "DUP12",
      "path": "33"
    },
    "745": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "ADD",
      "path": "33"
    },
    "746": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "748": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "DUP13",
      "path": "33"
    },
    "749": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "ADD",
      "path": "33"
    },
    "750": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "753": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        1071,
        1077
      ],
      "op": "JUMP",
      "path": "33"
    },
    "754": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1071,
        1077
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "755": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1079,
        1088
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "757": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1079,
        1088
      ],
      "op": "DUP12",
      "path": "33"
    },
    "758": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1079,
        1088
      ],
      "op": "ADD",
      "path": "33"
    },
    "759": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1079,
        1088
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "760": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1090,
        1097
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x60"
    },
    "762": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1090,
        1097
      ],
      "op": "DUP13",
      "path": "33"
    },
    "763": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1090,
        1097
      ],
      "op": "ADD",
      "path": "33"
    },
    "764": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1090,
        1097
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "765": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1099,
        1108
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x80"
    },
    "767": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1099,
        1108
      ],
      "op": "DUP14",
      "path": "33"
    },
    "768": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1099,
        1108
      ],
      "op": "ADD",
      "path": "33"
    },
    "769": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1099,
        1108
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "770": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1120,
        1128
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x30E"
    },
    "773": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1120,
        1128
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0xA0"
    },
    "775": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1120,
        1128
      ],
      "op": "DUP16",
      "path": "33"
    },
    "776": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1120,
        1128
      ],
      "op": "ADD",
      "path": "33"
    },
    "777": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1079,
        1082
      ],
      "op": "DUP16",
      "path": "33"
    },
    "778": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1120,
        1128
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0xA02"
    },
    "781": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        1120,
        1128
      ],
      "op": "JUMP",
      "path": "33"
    },
    "782": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1120,
        1128
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "783": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "785": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "786": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x31C"
    },
    "789": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "SWAP3",
      "path": "33"
    },
    "790": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "791": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "792": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x974"
    },
    "795": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        1110,
        1129
      ],
      "op": "JUMP",
      "path": "33"
    },
    "796": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "797": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "799": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "DUP1",
      "path": "33"
    },
    "800": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "801": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "SWAP2",
      "path": "33"
    },
    "802": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "DUP3",
      "path": "33"
    },
    "803": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "804": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "SUB",
      "path": "33"
    },
    "805": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "DUP3",
      "path": "33"
    },
    "806": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1110,
        1129
      ],
      "op": "KECCAK256",
      "path": "33"
    },
    "807": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "809": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "DUP4",
      "path": "33"
    },
    "810": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "ADD",
      "path": "33"
    },
    "811": {
      "op": "SWAP9"
    },
    "812": {
      "op": "SWAP1"
    },
    "813": {
      "op": "SWAP9"
    },
    "814": {
      "op": "MSTORE"
    },
    "815": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "817": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "819": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "821": {
      "op": "SHL"
    },
    "822": {
      "op": "SUB"
    },
    "823": {
      "op": "SWAP7"
    },
    "824": {
      "op": "DUP8"
    },
    "825": {
      "op": "AND"
    },
    "826": {
      "op": "SWAP1"
    },
    "827": {
      "op": "DUP3"
    },
    "828": {
      "op": "ADD"
    },
    "829": {
      "op": "MSTORE"
    },
    "830": {
      "op": "SWAP5"
    },
    "831": {
      "op": "SWAP1"
    },
    "832": {
      "op": "SWAP4"
    },
    "833": {
      "op": "AND"
    },
    "834": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "836": {
      "op": "DUP6"
    },
    "837": {
      "op": "ADD"
    },
    "838": {
      "op": "MSTORE"
    },
    "839": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "841": {
      "op": "DUP5"
    },
    "842": {
      "op": "ADD"
    },
    "843": {
      "op": "SWAP2"
    },
    "844": {
      "op": "SWAP1"
    },
    "845": {
      "op": "SWAP2"
    },
    "846": {
      "op": "MSTORE"
    },
    "847": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "849": {
      "op": "DUP4"
    },
    "850": {
      "op": "ADD"
    },
    "851": {
      "op": "MSTORE"
    },
    "852": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "854": {
      "op": "DUP3"
    },
    "855": {
      "op": "ADD"
    },
    "856": {
      "op": "MSTORE"
    },
    "857": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "859": {
      "op": "DUP2"
    },
    "860": {
      "op": "ADD"
    },
    "861": {
      "op": "SWAP2"
    },
    "862": {
      "op": "SWAP1"
    },
    "863": {
      "op": "SWAP2"
    },
    "864": {
      "op": "MSTORE"
    },
    "865": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "868": {
      "op": "ADD"
    },
    "869": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "871": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "872": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "874": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "DUP2",
      "path": "33"
    },
    "875": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "DUP4",
      "path": "33"
    },
    "876": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "SUB",
      "path": "33"
    },
    "877": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "SUB",
      "path": "33"
    },
    "878": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "DUP2",
      "path": "33"
    },
    "879": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "880": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "881": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x40"
    },
    "883": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1039,
        1130
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "884": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1029,
        1131
      ],
      "op": "DUP1",
      "path": "33"
    },
    "885": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1029,
        1131
      ],
      "op": "MLOAD",
      "path": "33"
    },
    "886": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1029,
        1131
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "887": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1029,
        1131
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "889": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1029,
        1131
      ],
      "op": "ADD",
      "path": "33"
    },
    "890": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1029,
        1131
      ],
      "op": "KECCAK256",
      "path": "33"
    },
    "891": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1015
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x3F0"
    },
    "894": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        999,
        1141
      ],
      "op": "JUMP",
      "path": "33"
    },
    "895": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1141
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "896": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1149
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "897": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1149
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x444"
    },
    "900": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        999,
        1160
      ],
      "op": "JUMP",
      "path": "33"
    },
    "901": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        999,
        1160
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "902": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        982,
        1160
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "903": {
      "op": "POP"
    },
    "904": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1198,
        1207
      ],
      "op": "PUSH1",
      "path": "33",
      "statement": 5,
      "value": "0x80"
    },
    "906": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1198,
        1207
      ],
      "op": "DUP6",
      "path": "33"
    },
    "907": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1198,
        1207
      ],
      "op": "ADD",
      "path": "33"
    },
    "908": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1198,
        1207
      ],
      "op": "CALLDATALOAD",
      "path": "33"
    },
    "909": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1184
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "911": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1184
      ],
      "op": "DUP1",
      "path": "33"
    },
    "912": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1185,
        1193
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x39C"
    },
    "915": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1185,
        1193
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "917": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1185,
        1193
      ],
      "op": "DUP10",
      "path": "33"
    },
    "918": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1185,
        1193
      ],
      "op": "ADD",
      "path": "33"
    },
    "919": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1198,
        1201
      ],
      "op": "DUP10",
      "path": "33"
    },
    "920": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1185,
        1193
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "923": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        1185,
        1193
      ],
      "op": "JUMP",
      "path": "33"
    },
    "924": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1185,
        1193
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "925": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "927": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "929": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "931": {
      "op": "SHL"
    },
    "932": {
      "op": "SUB"
    },
    "933": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "AND",
      "path": "33"
    },
    "934": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "936": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "938": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "940": {
      "op": "SHL"
    },
    "941": {
      "op": "SUB"
    },
    "942": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "AND",
      "path": "33"
    },
    "943": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "DUP2",
      "path": "33"
    },
    "944": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "945": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "947": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "ADD",
      "path": "33"
    },
    "948": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "SWAP1",
      "path": "33"
    },
    "949": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "DUP2",
      "path": "33"
    },
    "950": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "MSTORE",
      "path": "33"
    },
    "951": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "953": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "ADD",
      "path": "33"
    },
    "954": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x0"
    },
    "956": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "KECCAK256",
      "path": "33"
    },
    "957": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1194
      ],
      "op": "SLOAD",
      "path": "33"
    },
    "958": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1207
      ],
      "op": "EQ",
      "path": "33"
    },
    "959": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1229
      ],
      "op": "DUP1",
      "path": "33"
    },
    "960": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1229
      ],
      "op": "ISZERO",
      "path": "33"
    },
    "961": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1229
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x3E7"
    },
    "964": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1229
      ],
      "op": "JUMPI",
      "path": "33"
    },
    "965": {
      "op": "POP"
    },
    "966": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1229
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x3D2"
    },
    "969": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1229
      ],
      "op": "PUSH1",
      "path": "33",
      "value": "0x20"
    },
    "971": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1229
      ],
      "op": "DUP7",
      "path": "33"
    },
    "972": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1229
      ],
      "op": "ADD",
      "path": "33"
    },
    "973": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1224
      ],
      "op": "DUP7",
      "path": "33"
    },
    "974": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1229
      ],
      "op": "PUSH2",
      "path": "33",
      "value": "0x8A5"
    },
    "977": {
      "fn": "MinimalForwarder.verify",
      "jump": "i",
      "offset": [
        1221,
        1229
      ],
      "op": "JUMP",
      "path": "33"
    },
    "978": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1221,
        1229
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "979": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "983": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "985": {
      "op": "SHL"
    },
    "986": {
      "op": "SUB"
    },
    "987": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1211,
        1229
      ],
      "op": "AND",
      "path": "33"
    },
    "988": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1211,
        1217
      ],
      "op": "DUP2",
      "path": "33"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "993": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "995": {
      "op": "SHL"
    },
    "996": {
      "op": "SUB"
    },
    "997": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1211,
        1229
      ],
      "op": "AND",
      "path": "33"
    },
    "998": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1211,
        1229
      ],
      "op": "EQ",
      "path": "33"
    },
    "999": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1177,
        1229
      ],
      "op": "JUMPDEST",
      "path": "33"
    },
    "1000": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        1170,
        1229
      ],
      "op": "SWAP6",
      "path": "33"
    },
    "1001": {
      "fn": "MinimalForwarder.verify",
      "offset": [
        874,
        1236
      ],
      "op": "SWAP5",
      "path": "33"
    },
    "1002": {
      "op": "POP"
    },
    "1003": {
      "op": "POP"
    },
    "1004": {
      "op": "POP"
    },
    "1005": {
      "op": "POP"
    },
    "1006": {
      "op": "POP"
    },
    "1007": {
      "fn": "MinimalForwarder.verify",
      "jump": "o",
      "offset": [
        874,
        1236
      ],
      "op": "JUMP",
      "path": "33"
    },
    "1008": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4153,
        4318
      ],
      "op": "JUMPDEST",
      "path": "103"
    },
    "1009": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4230,
        4237
      ],
      "op": "PUSH1",
      "path": "103",
      "value": "0x0"
    },
    "1011": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4256,
        4311
      ],
      "op": "PUSH2",
      "path": "103",
      "statement": 6,
      "value": "0x43E"
    },
    "1014": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4278,
        4298
      ],
      "op": "PUSH2",
      "path": "103",
      "value": "0x3FD"
    },
    "1017": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4278,
        4296
      ],
      "op": "PUSH2",
      "path": "103",
      "value": "0x468"
    },
    "1020": {
      "fn": "EIP712._hashTypedDataV4",
      "jump": "i",
      "offset": [
        4278,
        4298
      ],
      "op": "JUMP",
      "path": "103"
    },
    "1021": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4278,
        4298
      ],
      "op": "JUMPDEST",
      "path": "103"
    },
    "1022": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4300,
        4310
      ],
      "op": "DUP4",
      "path": "103"
    },
    "1023": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 7,
      "value": "0x40"
    },
    "1025": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1026": {
      "op": "PUSH2",
      "value": "0x1901"
    },
    "1029": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1031": {
      "op": "SHL"
    },
    "1032": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "1034": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1035": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "ADD",
      "path": "100"
    },
    "1036": {
      "op": "MSTORE"
    },
    "1037": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1039": {
      "op": "DUP2"
    },
    "1040": {
      "op": "ADD"
    },
    "1041": {
      "op": "DUP4"
    },
    "1042": {
      "op": "SWAP1"
    },
    "1043": {
      "op": "MSTORE"
    },
    "1044": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "1046": {
      "op": "DUP2"
    },
    "1047": {
      "op": "ADD"
    },
    "1048": {
      "op": "DUP3"
    },
    "1049": {
      "op": "SWAP1"
    },
    "1050": {
      "op": "MSTORE"
    },
    "1051": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8652,
        8659
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1053": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8652,
        8659
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1054": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "1056": {
      "op": "ADD"
    },
    "1057": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "1059": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1060": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "1062": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1063": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "DUP4",
      "path": "100"
    },
    "1064": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "SUB",
      "path": "100"
    },
    "1065": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "SUB",
      "path": "100"
    },
    "1066": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1067": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "1068": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1069": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "1071": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8688,
        8745
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "1072": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8678,
        8746
      ],
      "op": "DUP1",
      "path": "100"
    },
    "1073": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8678,
        8746
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1074": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8678,
        8746
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1075": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8678,
        8746
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "1077": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8678,
        8746
      ],
      "op": "ADD",
      "path": "100"
    },
    "1078": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8678,
        8746
      ],
      "op": "KECCAK256",
      "path": "100"
    },
    "1079": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8671,
        8746
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1080": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8671,
        8746
      ],
      "op": "POP",
      "path": "100"
    },
    "1081": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8559,
        8753
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "1082": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8559,
        8753
      ],
      "op": "SWAP2",
      "path": "100"
    },
    "1083": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8559,
        8753
      ],
      "op": "POP",
      "path": "100"
    },
    "1084": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8559,
        8753
      ],
      "op": "POP",
      "path": "100"
    },
    "1085": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        8559,
        8753
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1086": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4256,
        4311
      ],
      "op": "JUMPDEST",
      "path": "103"
    },
    "1087": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4249,
        4311
      ],
      "op": "SWAP3",
      "path": "103"
    },
    "1088": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4153,
        4318
      ],
      "op": "SWAP2",
      "path": "103"
    },
    "1089": {
      "op": "POP"
    },
    "1090": {
      "op": "POP"
    },
    "1091": {
      "fn": "EIP712._hashTypedDataV4",
      "jump": "o",
      "offset": [
        4153,
        4318
      ],
      "op": "JUMP",
      "path": "103"
    },
    "1092": {
      "fn": "ECDSA.recover",
      "offset": [
        4203,
        4430
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1093": {
      "fn": "ECDSA.recover",
      "offset": [
        4281,
        4288
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1095": {
      "fn": "ECDSA.recover",
      "offset": [
        4301,
        4318
      ],
      "op": "DUP1",
      "path": "100"
    },
    "1096": {
      "fn": "ECDSA.recover",
      "offset": [
        4320,
        4338
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1098": {
      "fn": "ECDSA.recover",
      "offset": [
        4342,
        4369
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x453"
    },
    "1101": {
      "fn": "ECDSA.recover",
      "offset": [
        4353,
        4357
      ],
      "op": "DUP6",
      "path": "100"
    },
    "1102": {
      "fn": "ECDSA.recover",
      "offset": [
        4359,
        4368
      ],
      "op": "DUP6",
      "path": "100"
    },
    "1103": {
      "fn": "ECDSA.recover",
      "offset": [
        4342,
        4352
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x55B"
    },
    "1106": {
      "fn": "ECDSA.recover",
      "jump": "i",
      "offset": [
        4342,
        4369
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1107": {
      "fn": "ECDSA.recover",
      "offset": [
        4342,
        4369
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1108": {
      "fn": "ECDSA.recover",
      "offset": [
        4300,
        4369
      ],
      "op": "SWAP2",
      "path": "100"
    },
    "1109": {
      "fn": "ECDSA.recover",
      "offset": [
        4300,
        4369
      ],
      "op": "POP",
      "path": "100"
    },
    "1110": {
      "fn": "ECDSA.recover",
      "offset": [
        4300,
        4369
      ],
      "op": "SWAP2",
      "path": "100"
    },
    "1111": {
      "fn": "ECDSA.recover",
      "offset": [
        4300,
        4369
      ],
      "op": "POP",
      "path": "100"
    },
    "1112": {
      "fn": "ECDSA.recover",
      "offset": [
        4379,
        4397
      ],
      "op": "PUSH2",
      "path": "100",
      "statement": 8,
      "value": "0x460"
    },
    "1115": {
      "fn": "ECDSA.recover",
      "offset": [
        4391,
        4396
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1116": {
      "fn": "ECDSA.recover",
      "offset": [
        4379,
        4390
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5CB"
    },
    "1119": {
      "fn": "ECDSA.recover",
      "jump": "i",
      "offset": [
        4379,
        4397
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1120": {
      "fn": "ECDSA.recover",
      "offset": [
        4379,
        4397
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1121": {
      "op": "POP"
    },
    "1122": {
      "fn": "ECDSA.recover",
      "offset": [
        4414,
        4423
      ],
      "op": "SWAP4",
      "path": "100",
      "statement": 9
    },
    "1123": {
      "fn": "ECDSA.recover",
      "offset": [
        4203,
        4430
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "1124": {
      "op": "POP"
    },
    "1125": {
      "op": "POP"
    },
    "1126": {
      "op": "POP"
    },
    "1127": {
      "fn": "ECDSA.recover",
      "jump": "o",
      "offset": [
        4203,
        4430
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1128": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        2990,
        3265
      ],
      "op": "JUMPDEST",
      "path": "103"
    },
    "1129": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3043,
        3050
      ],
      "op": "PUSH1",
      "path": "103",
      "value": "0x0"
    },
    "1131": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3083,
        3099
      ],
      "op": "PUSH32",
      "path": "103",
      "value": "0x0"
    },
    "1164": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3066,
        3079
      ],
      "op": "CHAINID",
      "path": "103"
    },
    "1165": {
      "branch": 37,
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3066,
        3099
      ],
      "op": "EQ",
      "path": "103"
    },
    "1166": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3062,
        3259
      ],
      "op": "ISZERO",
      "path": "103"
    },
    "1167": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3062,
        3259
      ],
      "op": "PUSH2",
      "path": "103",
      "value": "0x4B7"
    },
    "1170": {
      "branch": 37,
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3062,
        3259
      ],
      "op": "JUMPI",
      "path": "103"
    },
    "1171": {
      "op": "POP"
    },
    "1172": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3122,
        3146
      ],
      "op": "PUSH32",
      "path": "103",
      "statement": 10,
      "value": "0x0"
    },
    "1205": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3122,
        3146
      ],
      "op": "SWAP1",
      "path": "103"
    },
    "1206": {
      "fn": "EIP712._domainSeparatorV4",
      "jump": "o",
      "offset": [
        2990,
        3265
      ],
      "op": "JUMP",
      "path": "103"
    },
    "1207": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3062,
        3259
      ],
      "op": "JUMPDEST",
      "path": "103"
    },
    "1208": {
      "op": "POP"
    },
    "1209": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "PUSH1",
      "path": "103",
      "statement": 11,
      "value": "0x40"
    },
    "1211": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP1",
      "path": "103"
    },
    "1212": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "MLOAD",
      "path": "103"
    },
    "1213": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3206,
        3216
      ],
      "op": "PUSH32",
      "path": "103",
      "statement": 12,
      "value": "0x0"
    },
    "1246": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "PUSH1",
      "path": "103",
      "value": "0x20"
    },
    "1248": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP1",
      "path": "103"
    },
    "1249": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP4",
      "path": "103"
    },
    "1250": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "ADD",
      "path": "103"
    },
    "1251": {
      "op": "SWAP2"
    },
    "1252": {
      "op": "SWAP1"
    },
    "1253": {
      "op": "SWAP2"
    },
    "1254": {
      "op": "MSTORE"
    },
    "1255": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3218,
        3230
      ],
      "op": "PUSH32",
      "path": "103",
      "value": "0x0"
    },
    "1288": {
      "op": "DUP3"
    },
    "1289": {
      "op": "DUP5"
    },
    "1290": {
      "op": "ADD"
    },
    "1291": {
      "op": "MSTORE"
    },
    "1292": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3232,
        3247
      ],
      "op": "PUSH32",
      "path": "103",
      "value": "0x0"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1327": {
      "op": "DUP4"
    },
    "1328": {
      "op": "ADD"
    },
    "1329": {
      "op": "MSTORE"
    },
    "1330": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3491,
        3504
      ],
      "op": "CHAINID",
      "path": "103"
    },
    "1331": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1333": {
      "op": "DUP4"
    },
    "1334": {
      "op": "ADD"
    },
    "1335": {
      "op": "MSTORE"
    },
    "1336": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3514,
        3518
      ],
      "op": "ADDRESS",
      "path": "103"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1339": {
      "op": "DUP1"
    },
    "1340": {
      "op": "DUP5"
    },
    "1341": {
      "op": "ADD"
    },
    "1342": {
      "op": "SWAP2"
    },
    "1343": {
      "op": "SWAP1"
    },
    "1344": {
      "op": "SWAP2"
    },
    "1345": {
      "op": "MSTORE"
    },
    "1346": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP4",
      "path": "103"
    },
    "1347": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "MLOAD",
      "path": "103"
    },
    "1348": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP1",
      "path": "103"
    },
    "1349": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP5",
      "path": "103"
    },
    "1350": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "SUB",
      "path": "103"
    },
    "1351": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "SWAP1",
      "path": "103"
    },
    "1352": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "SWAP2",
      "path": "103"
    },
    "1353": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "ADD",
      "path": "103"
    },
    "1354": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "DUP2",
      "path": "103"
    },
    "1355": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "MSTORE",
      "path": "103"
    },
    "1356": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1358": {
      "op": "SWAP1"
    },
    "1359": {
      "op": "SWAP3"
    },
    "1360": {
      "op": "ADD"
    },
    "1361": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "SWAP1",
      "path": "103"
    },
    "1362": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "SWAP3",
      "path": "103"
    },
    "1363": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3447,
        3520
      ],
      "op": "MSTORE",
      "path": "103"
    },
    "1364": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3437,
        3521
      ],
      "op": "DUP1",
      "path": "103"
    },
    "1365": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3437,
        3521
      ],
      "op": "MLOAD",
      "path": "103"
    },
    "1366": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3437,
        3521
      ],
      "op": "SWAP2",
      "path": "103"
    },
    "1367": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3437,
        3521
      ],
      "op": "ADD",
      "path": "103"
    },
    "1368": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3437,
        3521
      ],
      "op": "KECCAK256",
      "path": "103"
    },
    "1369": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3437,
        3521
      ],
      "op": "SWAP1",
      "path": "103"
    },
    "1370": {
      "fn": "EIP712._domainSeparatorV4",
      "jump": "o",
      "offset": [
        2990,
        3265
      ],
      "op": "JUMP",
      "path": "103"
    },
    "1371": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2138,
        3417
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1372": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2219,
        2226
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1374": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        2240
      ],
      "op": "DUP1",
      "path": "100"
    },
    "1375": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2449,
        2458
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1376": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2449,
        2465
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1377": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2469,
        2471
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x41"
    },
    "1379": {
      "branch": 26,
      "fn": "ECDSA.tryRecover",
      "offset": [
        2449,
        2471
      ],
      "op": "EQ",
      "path": "100"
    },
    "1380": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2445,
        3411
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1381": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2445,
        3411
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x592"
    },
    "1384": {
      "branch": 26,
      "fn": "ECDSA.tryRecover",
      "offset": [
        2445,
        3411
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1385": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2738,
        2742
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "1387": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2723,
        2743
      ],
      "op": "DUP4",
      "path": "100"
    },
    "1388": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2723,
        2743
      ],
      "op": "ADD",
      "path": "100"
    },
    "1389": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2717,
        2744
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1390": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2787,
        2791
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "1392": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2772,
        2792
      ],
      "op": "DUP5",
      "path": "100"
    },
    "1393": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2772,
        2792
      ],
      "op": "ADD",
      "path": "100"
    },
    "1394": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2766,
        2793
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1395": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2844,
        2848
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x60"
    },
    "1397": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2829,
        2849
      ],
      "op": "DUP6",
      "path": "100"
    },
    "1398": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2829,
        2849
      ],
      "op": "ADD",
      "path": "100"
    },
    "1399": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2823,
        2850
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1400": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2487,
        2496
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1402": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2815,
        2851
      ],
      "op": "BYTE",
      "path": "100"
    },
    "1403": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2885,
        2910
      ],
      "op": "PUSH2",
      "path": "100",
      "statement": 13,
      "value": "0x586"
    },
    "1406": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2896,
        2900
      ],
      "op": "DUP8",
      "path": "100"
    },
    "1407": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2815,
        2851
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1408": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2717,
        2744
      ],
      "op": "DUP6",
      "path": "100"
    },
    "1409": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2766,
        2793
      ],
      "op": "DUP6",
      "path": "100"
    },
    "1410": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2885,
        2895
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x789"
    },
    "1413": {
      "fn": "ECDSA.tryRecover",
      "jump": "i",
      "offset": [
        2885,
        2910
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1414": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2885,
        2910
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1415": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "SWAP5",
      "path": "100"
    },
    "1416": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "POP",
      "path": "100"
    },
    "1417": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "SWAP5",
      "path": "100"
    },
    "1418": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "POP",
      "path": "100"
    },
    "1419": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "POP",
      "path": "100"
    },
    "1420": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "POP",
      "path": "100"
    },
    "1421": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "POP",
      "path": "100"
    },
    "1422": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5C4"
    },
    "1425": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2878,
        2910
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1426": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2445,
        3411
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1427": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2931,
        2940
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1428": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2931,
        2947
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1429": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2951,
        2953
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "1431": {
      "branch": 27,
      "fn": "ECDSA.tryRecover",
      "offset": [
        2931,
        2953
      ],
      "op": "EQ",
      "path": "100"
    },
    "1432": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2927,
        3411
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1433": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2927,
        3411
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5BC"
    },
    "1436": {
      "branch": 27,
      "fn": "ECDSA.tryRecover",
      "offset": [
        2927,
        3411
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1437": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3200,
        3204
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "1439": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3185,
        3205
      ],
      "op": "DUP4",
      "path": "100"
    },
    "1440": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3185,
        3205
      ],
      "op": "ADD",
      "path": "100"
    },
    "1441": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3179,
        3206
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1442": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3250,
        3254
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "1444": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3235,
        3255
      ],
      "op": "DUP5",
      "path": "100"
    },
    "1445": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3235,
        3255
      ],
      "op": "ADD",
      "path": "100"
    },
    "1446": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3229,
        3256
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1447": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3290,
        3313
      ],
      "op": "PUSH2",
      "path": "100",
      "statement": 14,
      "value": "0x5B1"
    },
    "1450": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3301,
        3305
      ],
      "op": "DUP7",
      "path": "100"
    },
    "1451": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3179,
        3206
      ],
      "op": "DUP4",
      "path": "100"
    },
    "1452": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3229,
        3256
      ],
      "op": "DUP4",
      "path": "100"
    },
    "1453": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3290,
        3300
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x876"
    },
    "1456": {
      "fn": "ECDSA.tryRecover",
      "jump": "i",
      "offset": [
        3290,
        3313
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1457": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3290,
        3313
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1458": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "SWAP4",
      "path": "100"
    },
    "1459": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "POP",
      "path": "100"
    },
    "1460": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "SWAP4",
      "path": "100"
    },
    "1461": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "POP",
      "path": "100"
    },
    "1462": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "POP",
      "path": "100"
    },
    "1463": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "POP",
      "path": "100"
    },
    "1464": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5C4"
    },
    "1467": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3283,
        3313
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1468": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2927,
        3411
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1469": {
      "op": "POP"
    },
    "1470": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3360,
        3361
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 15,
      "value": "0x0"
    },
    "1472": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3360,
        3361
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1473": {
      "op": "POP"
    },
    "1474": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3364,
        3399
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x2"
    },
    "1476": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2927,
        3411
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1477": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2138,
        3417
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "1478": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2138,
        3417
      ],
      "op": "POP",
      "path": "100"
    },
    "1479": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2138,
        3417
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "1480": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2138,
        3417
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1481": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2138,
        3417
      ],
      "op": "POP",
      "path": "100"
    },
    "1482": {
      "fn": "ECDSA.tryRecover",
      "jump": "o",
      "offset": [
        2138,
        3417
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1483": {
      "fn": "ECDSA._throwError",
      "offset": [
        443,
        1074
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1484": {
      "fn": "ECDSA._throwError",
      "offset": [
        520,
        540
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1486": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        516
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1487": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1489": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1490": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "GT",
      "path": "100"
    },
    "1491": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1492": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5DF"
    },
    "1495": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1496": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5DF"
    },
    "1499": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0xAD7"
    },
    "1502": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        511,
        540
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1503": {
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1504": {
      "branch": 28,
      "fn": "ECDSA._throwError",
      "offset": [
        511,
        540
      ],
      "op": "EQ",
      "path": "100"
    },
    "1505": {
      "fn": "ECDSA._throwError",
      "offset": [
        507,
        1068
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1506": {
      "fn": "ECDSA._throwError",
      "offset": [
        507,
        1068
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5E8"
    },
    "1509": {
      "branch": 28,
      "fn": "ECDSA._throwError",
      "offset": [
        507,
        1068
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1510": {
      "fn": "ECDSA._throwError",
      "offset": [
        443,
        1074
      ],
      "op": "POP",
      "path": "100"
    },
    "1511": {
      "fn": "ECDSA._throwError",
      "jump": "o",
      "offset": [
        443,
        1074
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1512": {
      "fn": "ECDSA._throwError",
      "offset": [
        507,
        1068
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1513": {
      "fn": "ECDSA._throwError",
      "offset": [
        616,
        645
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x1"
    },
    "1515": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        612
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1516": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1518": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1519": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "GT",
      "path": "100"
    },
    "1520": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1521": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5FC"
    },
    "1524": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1525": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x5FC"
    },
    "1528": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0xAD7"
    },
    "1531": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        607,
        645
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1532": {
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1533": {
      "branch": 29,
      "fn": "ECDSA._throwError",
      "offset": [
        607,
        645
      ],
      "op": "EQ",
      "path": "100"
    },
    "1534": {
      "fn": "ECDSA._throwError",
      "offset": [
        603,
        1068
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1535": {
      "fn": "ECDSA._throwError",
      "offset": [
        603,
        1068
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x64A"
    },
    "1538": {
      "branch": 29,
      "fn": "ECDSA._throwError",
      "offset": [
        603,
        1068
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1539": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 16,
      "value": "0x40"
    },
    "1541": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1542": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1546": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1548": {
      "op": "SHL"
    },
    "1549": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1550": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "1551": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1553": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1555": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1556": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "ADD",
      "path": "100"
    },
    "1557": {
      "op": "MSTORE"
    },
    "1558": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "1560": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1562": {
      "op": "DUP3"
    },
    "1563": {
      "op": "ADD"
    },
    "1564": {
      "op": "MSTORE"
    },
    "1565": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E61747572650000000000000000"
    },
    "1598": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1600": {
      "op": "DUP3"
    },
    "1601": {
      "op": "ADD"
    },
    "1602": {
      "op": "MSTORE"
    },
    "1603": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1605": {
      "op": "ADD"
    },
    "1606": {
      "fn": "ECDSA._throwError",
      "offset": [
        661,
        695
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x145"
    },
    "1609": {
      "op": "JUMP"
    },
    "1610": {
      "fn": "ECDSA._throwError",
      "offset": [
        603,
        1068
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1611": {
      "fn": "ECDSA._throwError",
      "offset": [
        725,
        760
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x2"
    },
    "1613": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        721
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1614": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1616": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1617": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "GT",
      "path": "100"
    },
    "1618": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1619": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x65E"
    },
    "1622": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1623": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x65E"
    },
    "1626": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0xAD7"
    },
    "1629": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        716,
        760
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1630": {
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1631": {
      "branch": 30,
      "fn": "ECDSA._throwError",
      "offset": [
        716,
        760
      ],
      "op": "EQ",
      "path": "100"
    },
    "1632": {
      "fn": "ECDSA._throwError",
      "offset": [
        712,
        1068
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1633": {
      "fn": "ECDSA._throwError",
      "offset": [
        712,
        1068
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x6AC"
    },
    "1636": {
      "branch": 30,
      "fn": "ECDSA._throwError",
      "offset": [
        712,
        1068
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1637": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 17,
      "value": "0x40"
    },
    "1639": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1640": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1644": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1646": {
      "op": "SHL"
    },
    "1647": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1648": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "1649": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1651": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1653": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1654": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "ADD",
      "path": "100"
    },
    "1655": {
      "op": "MSTORE"
    },
    "1656": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1660": {
      "op": "DUP3"
    },
    "1661": {
      "op": "ADD"
    },
    "1662": {
      "op": "MSTORE"
    },
    "1663": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
    },
    "1696": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1698": {
      "op": "DUP3"
    },
    "1699": {
      "op": "ADD"
    },
    "1700": {
      "op": "MSTORE"
    },
    "1701": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1703": {
      "op": "ADD"
    },
    "1704": {
      "fn": "ECDSA._throwError",
      "offset": [
        776,
        817
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x145"
    },
    "1707": {
      "op": "JUMP"
    },
    "1708": {
      "fn": "ECDSA._throwError",
      "offset": [
        712,
        1068
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1709": {
      "fn": "ECDSA._throwError",
      "offset": [
        847,
        877
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x3"
    },
    "1711": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        843
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1712": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1714": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1715": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "GT",
      "path": "100"
    },
    "1716": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1717": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x6C0"
    },
    "1720": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1721": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x6C0"
    },
    "1724": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0xAD7"
    },
    "1727": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        838,
        877
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1728": {
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1729": {
      "branch": 31,
      "fn": "ECDSA._throwError",
      "offset": [
        838,
        877
      ],
      "op": "EQ",
      "path": "100"
    },
    "1730": {
      "fn": "ECDSA._throwError",
      "offset": [
        834,
        1068
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1731": {
      "fn": "ECDSA._throwError",
      "offset": [
        834,
        1068
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x719"
    },
    "1734": {
      "branch": 31,
      "fn": "ECDSA._throwError",
      "offset": [
        834,
        1068
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1735": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 18,
      "value": "0x40"
    },
    "1737": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1738": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1742": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1744": {
      "op": "SHL"
    },
    "1745": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1746": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "1747": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1749": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1751": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1752": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "ADD",
      "path": "100"
    },
    "1753": {
      "op": "MSTORE"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1756": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1758": {
      "op": "DUP3"
    },
    "1759": {
      "op": "ADD"
    },
    "1760": {
      "op": "MSTORE"
    },
    "1761": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265202773272076616C"
    },
    "1794": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1796": {
      "op": "DUP3"
    },
    "1797": {
      "op": "ADD"
    },
    "1798": {
      "op": "MSTORE"
    },
    "1799": {
      "op": "PUSH2",
      "value": "0x7565"
    },
    "1802": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1804": {
      "op": "SHL"
    },
    "1805": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1807": {
      "op": "DUP3"
    },
    "1808": {
      "op": "ADD"
    },
    "1809": {
      "op": "MSTORE"
    },
    "1810": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1812": {
      "op": "ADD"
    },
    "1813": {
      "fn": "ECDSA._throwError",
      "offset": [
        893,
        937
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x145"
    },
    "1816": {
      "op": "JUMP"
    },
    "1817": {
      "fn": "ECDSA._throwError",
      "offset": [
        834,
        1068
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1818": {
      "fn": "ECDSA._throwError",
      "offset": [
        967,
        997
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1820": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        963
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1821": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1823": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1824": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "GT",
      "path": "100"
    },
    "1825": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1826": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x72D"
    },
    "1829": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1830": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x72D"
    },
    "1833": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0xAD7"
    },
    "1836": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        958,
        997
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1837": {
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1838": {
      "branch": 32,
      "fn": "ECDSA._throwError",
      "offset": [
        958,
        997
      ],
      "op": "EQ",
      "path": "100"
    },
    "1839": {
      "fn": "ECDSA._throwError",
      "offset": [
        954,
        1068
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1840": {
      "fn": "ECDSA._throwError",
      "offset": [
        954,
        1068
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x786"
    },
    "1843": {
      "branch": 32,
      "fn": "ECDSA._throwError",
      "offset": [
        954,
        1068
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1844": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 19,
      "value": "0x40"
    },
    "1846": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "1847": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1851": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1853": {
      "op": "SHL"
    },
    "1854": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "DUP2",
      "path": "100"
    },
    "1855": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "1856": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1858": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "1860": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "DUP3",
      "path": "100"
    },
    "1861": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "ADD",
      "path": "100"
    },
    "1862": {
      "op": "MSTORE"
    },
    "1863": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1865": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1867": {
      "op": "DUP3"
    },
    "1868": {
      "op": "ADD"
    },
    "1869": {
      "op": "MSTORE"
    },
    "1870": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265202776272076616C"
    },
    "1903": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1905": {
      "op": "DUP3"
    },
    "1906": {
      "op": "ADD"
    },
    "1907": {
      "op": "MSTORE"
    },
    "1908": {
      "op": "PUSH2",
      "value": "0x7565"
    },
    "1911": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1913": {
      "op": "SHL"
    },
    "1914": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1916": {
      "op": "DUP3"
    },
    "1917": {
      "op": "ADD"
    },
    "1918": {
      "op": "MSTORE"
    },
    "1919": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1921": {
      "op": "ADD"
    },
    "1922": {
      "fn": "ECDSA._throwError",
      "offset": [
        1013,
        1057
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x145"
    },
    "1925": {
      "op": "JUMP"
    },
    "1926": {
      "fn": "ECDSA._throwError",
      "offset": [
        954,
        1068
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1927": {
      "fn": "ECDSA._throwError",
      "offset": [
        443,
        1074
      ],
      "op": "POP",
      "path": "100"
    },
    "1928": {
      "fn": "ECDSA._throwError",
      "jump": "o",
      "offset": [
        443,
        1074
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1929": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1930": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5780,
        5787
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "1932": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5780,
        5787
      ],
      "op": "DUP1",
      "path": "100"
    },
    "1933": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6709,
        6775
      ],
      "op": "PUSH32",
      "path": "100",
      "value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
    },
    "1966": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6696,
        6775
      ],
      "op": "DUP4",
      "path": "100"
    },
    "1967": {
      "branch": 33,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6696,
        6775
      ],
      "op": "GT",
      "path": "100"
    },
    "1968": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6692,
        6853
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1969": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6692,
        6853
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x7C0"
    },
    "1972": {
      "branch": 33,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6692,
        6853
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1973": {
      "op": "POP"
    },
    "1974": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6807,
        6808
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 20,
      "value": "0x0"
    },
    "1976": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6807,
        6808
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "1977": {
      "op": "POP"
    },
    "1978": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6811,
        6841
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x3"
    },
    "1980": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6791,
        6842
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x86D"
    },
    "1983": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6791,
        6842
      ],
      "op": "JUMP",
      "path": "100"
    },
    "1984": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6692,
        6853
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "1985": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6867
      ],
      "op": "DUP5",
      "path": "100"
    },
    "1986": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6873
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0xFF"
    },
    "1988": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6873
      ],
      "op": "AND",
      "path": "100"
    },
    "1989": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6871,
        6873
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x1B"
    },
    "1991": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6873
      ],
      "op": "EQ",
      "path": "100"
    },
    "1992": {
      "branch": 34,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6873
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1993": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6884
      ],
      "op": "DUP1",
      "path": "100"
    },
    "1994": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6884
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "1995": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6884
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x7D8"
    },
    "1998": {
      "branch": 34,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6884
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "1999": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6884
      ],
      "op": "POP",
      "path": "100"
    },
    "2000": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6877,
        6878
      ],
      "op": "DUP5",
      "path": "100"
    },
    "2001": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6877,
        6884
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0xFF"
    },
    "2003": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6877,
        6884
      ],
      "op": "AND",
      "path": "100"
    },
    "2004": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6882,
        6884
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x1C"
    },
    "2006": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6877,
        6884
      ],
      "op": "EQ",
      "path": "100"
    },
    "2007": {
      "branch": 35,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6877,
        6884
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "2008": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6866,
        6884
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2009": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6862,
        6962
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "2010": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6862,
        6962
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x7E9"
    },
    "2013": {
      "branch": 35,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6862,
        6962
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "2014": {
      "op": "POP"
    },
    "2015": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6916,
        6917
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 21,
      "value": "0x0"
    },
    "2017": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6916,
        6917
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "2018": {
      "op": "POP"
    },
    "2019": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6920,
        6950
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x4"
    },
    "2021": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6900,
        6951
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x86D"
    },
    "2024": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6900,
        6951
      ],
      "op": "JUMP",
      "path": "100"
    },
    "2025": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6862,
        6962
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2026": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "2028": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2029": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "2030": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7056,
        7070
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "2032": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2033": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP3",
      "path": "100"
    },
    "2034": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "2035": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "2037": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP3",
      "path": "100"
    },
    "2038": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "ADD",
      "path": "100"
    },
    "2039": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2040": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP5",
      "path": "100"
    },
    "2041": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "MSTORE",
      "path": "100"
    },
    "2042": {
      "op": "DUP10"
    },
    "2043": {
      "op": "SWAP1"
    },
    "2044": {
      "op": "MSTORE"
    },
    "2045": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2047": {
      "op": "DUP9"
    },
    "2048": {
      "op": "AND"
    },
    "2049": {
      "op": "SWAP3"
    },
    "2050": {
      "op": "DUP3"
    },
    "2051": {
      "op": "ADD"
    },
    "2052": {
      "op": "SWAP3"
    },
    "2053": {
      "op": "SWAP1"
    },
    "2054": {
      "op": "SWAP3"
    },
    "2055": {
      "op": "MSTORE"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2058": {
      "op": "DUP2"
    },
    "2059": {
      "op": "ADD"
    },
    "2060": {
      "op": "DUP7"
    },
    "2061": {
      "op": "SWAP1"
    },
    "2062": {
      "op": "MSTORE"
    },
    "2063": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2065": {
      "op": "DUP2"
    },
    "2066": {
      "op": "ADD"
    },
    "2067": {
      "op": "DUP6"
    },
    "2068": {
      "op": "SWAP1"
    },
    "2069": {
      "op": "MSTORE"
    },
    "2070": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x1"
    },
    "2072": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "2073": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2075": {
      "op": "ADD"
    },
    "2076": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "2078": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "2080": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "2081": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x20"
    },
    "2083": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP2",
      "path": "100"
    },
    "2084": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "SUB",
      "path": "100"
    },
    "2085": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "2086": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2087": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP5",
      "path": "100"
    },
    "2088": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "SUB",
      "path": "100"
    },
    "2089": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "2090": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP6",
      "path": "100"
    },
    "2091": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "GAS",
      "path": "100"
    },
    "2092": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "STATICCALL",
      "path": "100"
    },
    "2093": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "2094": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2095": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "ISZERO",
      "path": "100"
    },
    "2096": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x83D"
    },
    "2099": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "2100": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "RETURNDATASIZE",
      "path": "100"
    },
    "2101": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "2103": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2104": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "RETURNDATACOPY",
      "path": "100"
    },
    "2105": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "RETURNDATASIZE",
      "path": "100"
    },
    "2106": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "2108": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "REVERT",
      "path": "100"
    },
    "2109": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2110": {
      "op": "POP"
    },
    "2111": {
      "op": "POP"
    },
    "2112": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x40"
    },
    "2114": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "2115": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2117": {
      "op": "NOT"
    },
    "2118": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "ADD",
      "path": "100"
    },
    "2119": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "MLOAD",
      "path": "100"
    },
    "2120": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7073,
        7097
      ],
      "op": "SWAP2",
      "path": "100"
    },
    "2121": {
      "op": "POP"
    },
    "2122": {
      "op": "POP"
    },
    "2123": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2125": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2127": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2129": {
      "op": "SHL"
    },
    "2130": {
      "op": "SUB"
    },
    "2131": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7111,
        7131
      ],
      "op": "DUP2",
      "path": "100"
    },
    "2132": {
      "branch": 36,
      "fn": "ECDSA.tryRecover",
      "offset": [
        7111,
        7131
      ],
      "op": "AND",
      "path": "100"
    },
    "2133": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7107,
        7208
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x866"
    },
    "2136": {
      "branch": 36,
      "fn": "ECDSA.tryRecover",
      "offset": [
        7107,
        7208
      ],
      "op": "JUMPI",
      "path": "100"
    },
    "2137": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7163,
        7164
      ],
      "op": "PUSH1",
      "path": "100",
      "statement": 22,
      "value": "0x0"
    },
    "2139": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7167,
        7196
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x1"
    },
    "2141": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "2142": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "POP",
      "path": "100"
    },
    "2143": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "2144": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "POP",
      "path": "100"
    },
    "2145": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "POP",
      "path": "100"
    },
    "2146": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x86D"
    },
    "2149": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7147,
        7197
      ],
      "op": "JUMP",
      "path": "100"
    },
    "2150": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7107,
        7208
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2151": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7226,
        7232
      ],
      "op": "SWAP2",
      "path": "100",
      "statement": 23
    },
    "2152": {
      "op": "POP"
    },
    "2153": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7234,
        7254
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "2155": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7234,
        7254
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "2156": {
      "op": "POP"
    },
    "2157": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2158": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "SWAP5",
      "path": "100"
    },
    "2159": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "POP",
      "path": "100"
    },
    "2160": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "SWAP5",
      "path": "100"
    },
    "2161": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "SWAP3",
      "path": "100"
    },
    "2162": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "POP",
      "path": "100"
    },
    "2163": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "POP",
      "path": "100"
    },
    "2164": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5654,
        7262
      ],
      "op": "POP",
      "path": "100"
    },
    "2165": {
      "fn": "ECDSA.tryRecover",
      "jump": "o",
      "offset": [
        5654,
        7262
      ],
      "op": "JUMP",
      "path": "100"
    },
    "2166": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2167": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4794,
        4801
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x0"
    },
    "2169": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4794,
        4801
      ],
      "op": "DUP1",
      "path": "100"
    },
    "2170": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2172": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2174": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2176": {
      "op": "SHL"
    },
    "2177": {
      "op": "SUB"
    },
    "2178": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4891,
        4966
      ],
      "op": "DUP4",
      "path": "100"
    },
    "2179": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4891,
        4966
      ],
      "op": "AND",
      "path": "100"
    },
    "2180": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4992,
        4995
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0xFF"
    },
    "2182": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4988,
        5000
      ],
      "op": "DUP5",
      "path": "100"
    },
    "2183": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4988,
        5000
      ],
      "op": "SWAP1",
      "path": "100"
    },
    "2184": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4988,
        5000
      ],
      "op": "SHR",
      "path": "100"
    },
    "2185": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5002,
        5004
      ],
      "op": "PUSH1",
      "path": "100",
      "value": "0x1B"
    },
    "2187": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4984,
        5005
      ],
      "op": "ADD",
      "path": "100"
    },
    "2188": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5031,
        5056
      ],
      "op": "PUSH2",
      "path": "100",
      "statement": 24,
      "value": "0x897"
    },
    "2191": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5042,
        5046
      ],
      "op": "DUP8",
      "path": "100"
    },
    "2192": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4984,
        5005
      ],
      "op": "DUP3",
      "path": "100"
    },
    "2193": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5051,
        5052
      ],
      "op": "DUP9",
      "path": "100"
    },
    "2194": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4891,
        4966
      ],
      "op": "DUP6",
      "path": "100"
    },
    "2195": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5031,
        5041
      ],
      "op": "PUSH2",
      "path": "100",
      "value": "0x789"
    },
    "2198": {
      "fn": "ECDSA.tryRecover",
      "jump": "i",
      "offset": [
        5031,
        5056
      ],
      "op": "JUMP",
      "path": "100"
    },
    "2199": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5031,
        5056
      ],
      "op": "JUMPDEST",
      "path": "100"
    },
    "2200": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5024,
        5056
      ],
      "op": "SWAP4",
      "path": "100"
    },
    "2201": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5024,
        5056
      ],
      "op": "POP",
      "path": "100"
    },
    "2202": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5024,
        5056
      ],
      "op": "SWAP4",
      "path": "100"
    },
    "2203": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5024,
        5056
      ],
      "op": "POP",
      "path": "100"
    },
    "2204": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5024,
        5056
      ],
      "op": "POP",
      "path": "100"
    },
    "2205": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5024,
        5056
      ],
      "op": "POP",
      "path": "100"
    },
    "2206": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "SWAP4",
      "path": "100"
    },
    "2207": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "POP",
      "path": "100"
    },
    "2208": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "SWAP4",
      "path": "100"
    },
    "2209": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "SWAP2",
      "path": "100"
    },
    "2210": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "POP",
      "path": "100"
    },
    "2211": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4684,
        5063
      ],
      "op": "POP",
      "path": "100"
    },
    "2212": {
      "fn": "ECDSA.tryRecover",
      "jump": "o",
      "offset": [
        4684,
        5063
      ],
      "op": "JUMP",
      "path": "100"
    },
    "2213": {
      "op": "JUMPDEST"
    },
    "2214": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2216": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2218": {
      "op": "DUP3"
    },
    "2219": {
      "op": "DUP5"
    },
    "2220": {
      "op": "SUB"
    },
    "2221": {
      "op": "SLT"
    },
    "2222": {
      "op": "ISZERO"
    },
    "2223": {
      "op": "PUSH2",
      "value": "0x8B7"
    },
    "2226": {
      "op": "JUMPI"
    },
    "2227": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2229": {
      "op": "DUP1"
    },
    "2230": {
      "op": "REVERT"
    },
    "2231": {
      "op": "JUMPDEST"
    },
    "2232": {
      "op": "DUP2"
    },
    "2233": {
      "op": "CALLDATALOAD"
    },
    "2234": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2236": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2238": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2240": {
      "op": "SHL"
    },
    "2241": {
      "op": "SUB"
    },
    "2242": {
      "op": "DUP2"
    },
    "2243": {
      "op": "AND"
    },
    "2244": {
      "op": "DUP2"
    },
    "2245": {
      "op": "EQ"
    },
    "2246": {
      "op": "PUSH2",
      "value": "0x8CE"
    },
    "2249": {
      "op": "JUMPI"
    },
    "2250": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2252": {
      "op": "DUP1"
    },
    "2253": {
      "op": "REVERT"
    },
    "2254": {
      "op": "JUMPDEST"
    },
    "2255": {
      "op": "SWAP4"
    },
    "2256": {
      "op": "SWAP3"
    },
    "2257": {
      "op": "POP"
    },
    "2258": {
      "op": "POP"
    },
    "2259": {
      "op": "POP"
    },
    "2260": {
      "jump": "o",
      "op": "JUMP"
    },
    "2261": {
      "op": "JUMPDEST"
    },
    "2262": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2264": {
      "op": "DUP1"
    },
    "2265": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2267": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2269": {
      "op": "DUP5"
    },
    "2270": {
      "op": "DUP7"
    },
    "2271": {
      "op": "SUB"
    },
    "2272": {
      "op": "SLT"
    },
    "2273": {
      "op": "ISZERO"
    },
    "2274": {
      "op": "PUSH2",
      "value": "0x8EA"
    },
    "2277": {
      "op": "JUMPI"
    },
    "2278": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2280": {
      "op": "DUP1"
    },
    "2281": {
      "op": "REVERT"
    },
    "2282": {
      "op": "JUMPDEST"
    },
    "2283": {
      "op": "DUP4"
    },
    "2284": {
      "op": "CALLDATALOAD"
    },
    "2285": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2294": {
      "op": "DUP1"
    },
    "2295": {
      "op": "DUP3"
    },
    "2296": {
      "op": "GT"
    },
    "2297": {
      "op": "ISZERO"
    },
    "2298": {
      "op": "PUSH2",
      "value": "0x902"
    },
    "2301": {
      "op": "JUMPI"
    },
    "2302": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2304": {
      "op": "DUP1"
    },
    "2305": {
      "op": "REVERT"
    },
    "2306": {
      "op": "JUMPDEST"
    },
    "2307": {
      "op": "SWAP1"
    },
    "2308": {
      "op": "DUP6"
    },
    "2309": {
      "op": "ADD"
    },
    "2310": {
      "op": "SWAP1"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2313": {
      "op": "DUP3"
    },
    "2314": {
      "op": "DUP9"
    },
    "2315": {
      "op": "SUB"
    },
    "2316": {
      "op": "SLT"
    },
    "2317": {
      "op": "ISZERO"
    },
    "2318": {
      "op": "PUSH2",
      "value": "0x916"
    },
    "2321": {
      "op": "JUMPI"
    },
    "2322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2324": {
      "op": "DUP1"
    },
    "2325": {
      "op": "REVERT"
    },
    "2326": {
      "op": "JUMPDEST"
    },
    "2327": {
      "op": "SWAP1"
    },
    "2328": {
      "op": "SWAP4"
    },
    "2329": {
      "op": "POP"
    },
    "2330": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2332": {
      "op": "DUP6"
    },
    "2333": {
      "op": "ADD"
    },
    "2334": {
      "op": "CALLDATALOAD"
    },
    "2335": {
      "op": "SWAP1"
    },
    "2336": {
      "op": "DUP1"
    },
    "2337": {
      "op": "DUP3"
    },
    "2338": {
      "op": "GT"
    },
    "2339": {
      "op": "ISZERO"
    },
    "2340": {
      "op": "PUSH2",
      "value": "0x92C"
    },
    "2343": {
      "op": "JUMPI"
    },
    "2344": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2346": {
      "op": "DUP1"
    },
    "2347": {
      "op": "REVERT"
    },
    "2348": {
      "op": "JUMPDEST"
    },
    "2349": {
      "op": "DUP2"
    },
    "2350": {
      "op": "DUP7"
    },
    "2351": {
      "op": "ADD"
    },
    "2352": {
      "op": "SWAP2"
    },
    "2353": {
      "op": "POP"
    },
    "2354": {
      "op": "DUP7"
    },
    "2355": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2357": {
      "op": "DUP4"
    },
    "2358": {
      "op": "ADD"
    },
    "2359": {
      "op": "SLT"
    },
    "2360": {
      "op": "PUSH2",
      "value": "0x940"
    },
    "2363": {
      "op": "JUMPI"
    },
    "2364": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2366": {
      "op": "DUP1"
    },
    "2367": {
      "op": "REVERT"
    },
    "2368": {
      "op": "JUMPDEST"
    },
    "2369": {
      "op": "DUP2"
    },
    "2370": {
      "op": "CALLDATALOAD"
    },
    "2371": {
      "op": "DUP2"
    },
    "2372": {
      "op": "DUP2"
    },
    "2373": {
      "op": "GT"
    },
    "2374": {
      "op": "ISZERO"
    },
    "2375": {
      "op": "PUSH2",
      "value": "0x94F"
    },
    "2378": {
      "op": "JUMPI"
    },
    "2379": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2381": {
      "op": "DUP1"
    },
    "2382": {
      "op": "REVERT"
    },
    "2383": {
      "op": "JUMPDEST"
    },
    "2384": {
      "op": "DUP8"
    },
    "2385": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2387": {
      "op": "DUP3"
    },
    "2388": {
      "op": "DUP6"
    },
    "2389": {
      "op": "ADD"
    },
    "2390": {
      "op": "ADD"
    },
    "2391": {
      "op": "GT"
    },
    "2392": {
      "op": "ISZERO"
    },
    "2393": {
      "op": "PUSH2",
      "value": "0x961"
    },
    "2396": {
      "op": "JUMPI"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2399": {
      "op": "DUP1"
    },
    "2400": {
      "op": "REVERT"
    },
    "2401": {
      "op": "JUMPDEST"
    },
    "2402": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2404": {
      "op": "DUP4"
    },
    "2405": {
      "op": "ADD"
    },
    "2406": {
      "op": "SWAP5"
    },
    "2407": {
      "op": "POP"
    },
    "2408": {
      "op": "DUP1"
    },
    "2409": {
      "op": "SWAP4"
    },
    "2410": {
      "op": "POP"
    },
    "2411": {
      "op": "POP"
    },
    "2412": {
      "op": "POP"
    },
    "2413": {
      "op": "POP"
    },
    "2414": {
      "op": "SWAP3"
    },
    "2415": {
      "op": "POP"
    },
    "2416": {
      "op": "SWAP3"
    },
    "2417": {
      "op": "POP"
    },
    "2418": {
      "op": "SWAP3"
    },
    "2419": {
      "jump": "o",
      "op": "JUMP"
    },
    "2420": {
      "op": "JUMPDEST"
    },
    "2421": {
      "op": "DUP2"
    },
    "2422": {
      "op": "DUP4"
    },
    "2423": {
      "op": "DUP3"
    },
    "2424": {
      "op": "CALLDATACOPY"
    },
    "2425": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2427": {
      "op": "SWAP2"
    },
    "2428": {
      "op": "ADD"
    },
    "2429": {
      "op": "SWAP1"
    },
    "2430": {
      "op": "DUP2"
    },
    "2431": {
      "op": "MSTORE"
    },
    "2432": {
      "op": "SWAP2"
    },
    "2433": {
      "op": "SWAP1"
    },
    "2434": {
      "op": "POP"
    },
    "2435": {
      "jump": "o",
      "op": "JUMP"
    },
    "2436": {
      "op": "JUMPDEST"
    },
    "2437": {
      "op": "DUP3"
    },
    "2438": {
      "op": "DUP5"
    },
    "2439": {
      "op": "DUP3"
    },
    "2440": {
      "op": "CALLDATACOPY"
    },
    "2441": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2443": {
      "op": "SWAP2"
    },
    "2444": {
      "op": "SWAP1"
    },
    "2445": {
      "op": "SWAP2"
    },
    "2446": {
      "op": "SHL"
    },
    "2447": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "2460": {
      "op": "NOT"
    },
    "2461": {
      "op": "AND"
    },
    "2462": {
      "op": "SWAP2"
    },
    "2463": {
      "op": "ADD"
    },
    "2464": {
      "op": "SWAP1"
    },
    "2465": {
      "op": "DUP2"
    },
    "2466": {
      "op": "MSTORE"
    },
    "2467": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "2469": {
      "op": "ADD"
    },
    "2470": {
      "op": "SWAP2"
    },
    "2471": {
      "op": "SWAP1"
    },
    "2472": {
      "op": "POP"
    },
    "2473": {
      "jump": "o",
      "op": "JUMP"
    },
    "2474": {
      "op": "JUMPDEST"
    },
    "2475": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2477": {
      "op": "DUP3"
    },
    "2478": {
      "op": "MLOAD"
    },
    "2479": {
      "op": "PUSH2",
      "value": "0x9BC"
    },
    "2482": {
      "op": "DUP2"
    },
    "2483": {
      "op": "DUP5"
    },
    "2484": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2486": {
      "op": "DUP8"
    },
    "2487": {
      "op": "ADD"
    },
    "2488": {
      "op": "PUSH2",
      "value": "0xA91"
    },
    "2491": {
      "jump": "i",
      "op": "JUMP"
    },
    "2492": {
      "op": "JUMPDEST"
    },
    "2493": {
      "op": "SWAP2"
    },
    "2494": {
      "op": "SWAP1"
    },
    "2495": {
      "op": "SWAP2"
    },
    "2496": {
      "op": "ADD"
    },
    "2497": {
      "op": "SWAP3"
    },
    "2498": {
      "op": "SWAP2"
    },
    "2499": {
      "op": "POP"
    },
    "2500": {
      "op": "POP"
    },
    "2501": {
      "jump": "o",
      "op": "JUMP"
    },
    "2502": {
      "op": "JUMPDEST"
    },
    "2503": {
      "op": "DUP3"
    },
    "2504": {
      "op": "ISZERO"
    },
    "2505": {
      "op": "ISZERO"
    },
    "2506": {
      "op": "DUP2"
    },
    "2507": {
      "op": "MSTORE"
    },
    "2508": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2510": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2512": {
      "op": "DUP3"
    },
    "2513": {
      "op": "ADD"
    },
    "2514": {
      "op": "MSTORE"
    },
    "2515": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2517": {
      "op": "DUP3"
    },
    "2518": {
      "op": "MLOAD"
    },
    "2519": {
      "op": "DUP1"
    },
    "2520": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2522": {
      "op": "DUP5"
    },
    "2523": {
      "op": "ADD"
    },
    "2524": {
      "op": "MSTORE"
    },
    "2525": {
      "op": "PUSH2",
      "value": "0x9ED"
    },
    "2528": {
      "op": "DUP2"
    },
    "2529": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2531": {
      "op": "DUP6"
    },
    "2532": {
      "op": "ADD"
    },
    "2533": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2535": {
      "op": "DUP8"
    },
    "2536": {
      "op": "ADD"
    },
    "2537": {
      "op": "PUSH2",
      "value": "0xA91"
    },
    "2540": {
      "jump": "i",
      "op": "JUMP"
    },
    "2541": {
      "op": "JUMPDEST"
    },
    "2542": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2544": {
      "op": "ADD"
    },
    "2545": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2547": {
      "op": "NOT"
    },
    "2548": {
      "op": "AND"
    },
    "2549": {
      "op": "SWAP2"
    },
    "2550": {
      "op": "SWAP1"
    },
    "2551": {
      "op": "SWAP2"
    },
    "2552": {
      "op": "ADD"
    },
    "2553": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2555": {
      "op": "ADD"
    },
    "2556": {
      "op": "SWAP4"
    },
    "2557": {
      "op": "SWAP3"
    },
    "2558": {
      "op": "POP"
    },
    "2559": {
      "op": "POP"
    },
    "2560": {
      "op": "POP"
    },
    "2561": {
      "jump": "o",
      "op": "JUMP"
    },
    "2562": {
      "op": "JUMPDEST"
    },
    "2563": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2565": {
      "op": "DUP1"
    },
    "2566": {
      "op": "DUP4"
    },
    "2567": {
      "op": "CALLDATALOAD"
    },
    "2568": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "2570": {
      "op": "NOT"
    },
    "2571": {
      "op": "DUP5"
    },
    "2572": {
      "op": "CALLDATASIZE"
    },
    "2573": {
      "op": "SUB"
    },
    "2574": {
      "op": "ADD"
    },
    "2575": {
      "op": "DUP2"
    },
    "2576": {
      "op": "SLT"
    },
    "2577": {
      "op": "PUSH2",
      "value": "0xA19"
    },
    "2580": {
      "op": "JUMPI"
    },
    "2581": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2583": {
      "op": "DUP1"
    },
    "2584": {
      "op": "REVERT"
    },
    "2585": {
      "op": "JUMPDEST"
    },
    "2586": {
      "op": "DUP4"
    },
    "2587": {
      "op": "ADD"
    },
    "2588": {
      "op": "DUP1"
    },
    "2589": {
      "op": "CALLDATALOAD"
    },
    "2590": {
      "op": "SWAP2"
    },
    "2591": {
      "op": "POP"
    },
    "2592": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2601": {
      "op": "DUP3"
    },
    "2602": {
      "op": "GT"
    },
    "2603": {
      "op": "ISZERO"
    },
    "2604": {
      "op": "PUSH2",
      "value": "0xA34"
    },
    "2607": {
      "op": "JUMPI"
    },
    "2608": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2610": {
      "op": "DUP1"
    },
    "2611": {
      "op": "REVERT"
    },
    "2612": {
      "op": "JUMPDEST"
    },
    "2613": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2615": {
      "op": "ADD"
    },
    "2616": {
      "op": "SWAP2"
    },
    "2617": {
      "op": "POP"
    },
    "2618": {
      "op": "CALLDATASIZE"
    },
    "2619": {
      "op": "DUP2"
    },
    "2620": {
      "op": "SWAP1"
    },
    "2621": {
      "op": "SUB"
    },
    "2622": {
      "op": "DUP3"
    },
    "2623": {
      "op": "SGT"
    },
    "2624": {
      "op": "ISZERO"
    },
    "2625": {
      "op": "PUSH2",
      "value": "0x5C4"
    },
    "2628": {
      "op": "JUMPI"
    },
    "2629": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2631": {
      "op": "DUP1"
    },
    "2632": {
      "op": "REVERT"
    },
    "2633": {
      "op": "JUMPDEST"
    },
    "2634": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2636": {
      "op": "DUP3"
    },
    "2637": {
      "op": "NOT"
    },
    "2638": {
      "op": "DUP3"
    },
    "2639": {
      "op": "GT"
    },
    "2640": {
      "op": "ISZERO"
    },
    "2641": {
      "op": "PUSH2",
      "value": "0xA6A"
    },
    "2644": {
      "op": "JUMPI"
    },
    "2645": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2650": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2652": {
      "op": "SHL"
    },
    "2653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2655": {
      "op": "MSTORE"
    },
    "2656": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2658": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2660": {
      "op": "MSTORE"
    },
    "2661": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2663": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2665": {
      "op": "REVERT"
    },
    "2666": {
      "op": "JUMPDEST"
    },
    "2667": {
      "op": "POP"
    },
    "2668": {
      "op": "ADD"
    },
    "2669": {
      "op": "SWAP1"
    },
    "2670": {
      "jump": "o",
      "op": "JUMP"
    },
    "2671": {
      "op": "JUMPDEST"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2674": {
      "op": "DUP3"
    },
    "2675": {
      "op": "PUSH2",
      "value": "0xA8C"
    },
    "2678": {
      "op": "JUMPI"
    },
    "2679": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2684": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2686": {
      "op": "SHL"
    },
    "2687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2689": {
      "op": "MSTORE"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2694": {
      "op": "MSTORE"
    },
    "2695": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2697": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2699": {
      "op": "REVERT"
    },
    "2700": {
      "op": "JUMPDEST"
    },
    "2701": {
      "op": "POP"
    },
    "2702": {
      "op": "DIV"
    },
    "2703": {
      "op": "SWAP1"
    },
    "2704": {
      "jump": "o",
      "op": "JUMP"
    },
    "2705": {
      "op": "JUMPDEST"
    },
    "2706": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2708": {
      "op": "JUMPDEST"
    },
    "2709": {
      "op": "DUP4"
    },
    "2710": {
      "op": "DUP2"
    },
    "2711": {
      "op": "LT"
    },
    "2712": {
      "op": "ISZERO"
    },
    "2713": {
      "op": "PUSH2",
      "value": "0xAAC"
    },
    "2716": {
      "op": "JUMPI"
    },
    "2717": {
      "op": "DUP2"
    },
    "2718": {
      "op": "DUP2"
    },
    "2719": {
      "op": "ADD"
    },
    "2720": {
      "op": "MLOAD"
    },
    "2721": {
      "op": "DUP4"
    },
    "2722": {
      "op": "DUP3"
    },
    "2723": {
      "op": "ADD"
    },
    "2724": {
      "op": "MSTORE"
    },
    "2725": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2727": {
      "op": "ADD"
    },
    "2728": {
      "op": "PUSH2",
      "value": "0xA94"
    },
    "2731": {
      "op": "JUMP"
    },
    "2732": {
      "op": "JUMPDEST"
    },
    "2733": {
      "op": "DUP4"
    },
    "2734": {
      "op": "DUP2"
    },
    "2735": {
      "op": "GT"
    },
    "2736": {
      "op": "ISZERO"
    },
    "2737": {
      "op": "PUSH2",
      "value": "0xABB"
    },
    "2740": {
      "op": "JUMPI"
    },
    "2741": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2743": {
      "op": "DUP5"
    },
    "2744": {
      "op": "DUP5"
    },
    "2745": {
      "op": "ADD"
    },
    "2746": {
      "op": "MSTORE"
    },
    "2747": {
      "op": "JUMPDEST"
    },
    "2748": {
      "op": "POP"
    },
    "2749": {
      "op": "POP"
    },
    "2750": {
      "op": "POP"
    },
    "2751": {
      "op": "POP"
    },
    "2752": {
      "jump": "o",
      "op": "JUMP"
    },
    "2753": {
      "op": "JUMPDEST"
    },
    "2754": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2759": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2761": {
      "op": "SHL"
    },
    "2762": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2764": {
      "op": "MSTORE"
    },
    "2765": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2767": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2769": {
      "op": "MSTORE"
    },
    "2770": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2772": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2774": {
      "op": "REVERT"
    },
    "2775": {
      "op": "JUMPDEST"
    },
    "2776": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2781": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2783": {
      "op": "SHL"
    },
    "2784": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2786": {
      "op": "MSTORE"
    },
    "2787": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "2789": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2791": {
      "op": "MSTORE"
    },
    "2792": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2794": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2796": {
      "op": "REVERT"
    }
  },
  "sha1": "e53de7132cd7b88fb98f701a090442826bba81f4",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/draft-EIP712.sol\";\n\n/**\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\n */\ncontract MinimalForwarder is EIP712 {\n    using ECDSA for bytes32;\n\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n    }\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\");\n\n    mapping(address => uint256) private _nonces;\n\n    constructor() EIP712(\"MinimalForwarder\", \"0.0.1\") {}\n\n    function getNonce(address from) public view returns (uint256) {\n        return _nonces[from];\n    }\n\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\n        address signer = _hashTypedDataV4(\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\n        ).recover(signature);\n        return _nonces[req.from] == req.nonce && signer == req.from;\n    }\n\n    function execute(ForwardRequest calldata req, bytes calldata signature)\n        public\n        payable\n        returns (bool, bytes memory)\n    {\n        require(verify(req, signature), \"MinimalForwarder: signature does not match request\");\n        _nonces[req.from] = req.nonce + 1;\n\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\n            abi.encodePacked(req.data, req.from)\n        );\n        // Validate that the relayer has sent enough gas for the call.\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\n        assert(gasleft() > req.gas / 63);\n\n        return (success, returndata);\n    }\n}\n",
  "sourceMap": "270:1636:33:-:0;;;711:52;;;;;;;;;-1:-1:-1;2340:564:103;;;;;;;;;;;-1:-1:-1;;;2340:564:103;;;;;;;;;;;;;;;;;-1:-1:-1;;;2340:564:103;;;;2426:22;;;;2663:25;;;;2482;2698:31;;;;2758:13;2739:32;;;;3447:73;;2536:117;3447:73;;;273:25:121;;;314:18;;;307:34;;;;357:18;;;350:34;;;;400:18;;;;393:34;;;;3514:4:103;443:19:121;;;436:61;3447:73:103;;;;;;;;;;245:19:121;;;;3447:73:103;;;3437:84;;;;;;;;;;2781:85;;2876:21;;270:1636:33;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/node_modules/@openzeppelin/contracts/metatx/MinimalForwarder.sol",
  "type": "contract"
}